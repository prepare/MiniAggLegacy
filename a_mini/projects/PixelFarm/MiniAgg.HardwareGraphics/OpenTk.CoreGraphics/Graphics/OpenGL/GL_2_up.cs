#region License
//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2009 the Open Toolkit library.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//
#endregion

#if ENABLE_DESKTOP_OPENGL && gl20up
namespace OpenTK.Graphics.OpenGL
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;
#pragma warning disable 3019
#pragma warning disable 1591
#pragma warning disable 1572
#pragma warning disable 1573

    partial class GL
    {


        /// <summary>
        /// Multiply the current matrix by a perspective matrix
        /// </summary>
        /// <param name="left">
        /// <para>
        /// Specify the coordinates for the left and right vertical clipping planes.
        /// </para>
        /// </param>
        /// <param name="bottom">
        /// <para>
        /// Specify the coordinates for the bottom and top horizontal clipping planes.
        /// </para>
        /// </param>
        /// <param name="nearVal">
        /// <para>
        /// Specify the distances to the near and far depth clipping planes. Both distances must be positive.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version10Deprecated", Version = "1.0", EntryPoint = "glFrustum")]
        public static
        void Frustum(Double left, Double right, Double bottom, Double top, Double zNear, Double zFar)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glFrustum((Double)left, (Double)right, (Double)bottom, (Double)top, (Double)zNear, (Double)zFar);
#if DEBUG
            }
#endif
        }


        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenerateMipmap")]
        public static
        void GenerateMipmap(OpenTK.Graphics.OpenGL.GenerateMipmapTarget target)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGenerateMipmap((OpenTK.Graphics.OpenGL.GenerateMipmapTarget)target);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static
        void GenFramebuffers(Int32 n, [OutAttribute] Int32[] framebuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* framebuffers_ptr = framebuffers)
                    {
                        Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static
        void GenFramebuffers(Int32 n, [OutAttribute] out Int32 framebuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* framebuffers_ptr = &framebuffers)
                    {
                        Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                        framebuffers = *framebuffers_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static
        unsafe void GenFramebuffers(Int32 n, [OutAttribute] Int32* framebuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static
        void GenFramebuffers(Int32 n, [OutAttribute] UInt32[] framebuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* framebuffers_ptr = framebuffers)
                    {
                        Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static
        void GenFramebuffers(Int32 n, [OutAttribute] out UInt32 framebuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* framebuffers_ptr = &framebuffers)
                    {
                        Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                        framebuffers = *framebuffers_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static
        void GenRenderbuffers(Int32 n, [OutAttribute] Int32[] renderbuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* renderbuffers_ptr = renderbuffers)
                    {
                        Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static
        void GenRenderbuffers(Int32 n, [OutAttribute] out Int32 renderbuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* renderbuffers_ptr = &renderbuffers)
                    {
                        Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                        renderbuffers = *renderbuffers_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static
        unsafe void GenRenderbuffers(Int32 n, [OutAttribute] Int32* renderbuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static
        void GenRenderbuffers(Int32 n, [OutAttribute] UInt32[] renderbuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* renderbuffers_ptr = renderbuffers)
                    {
                        Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static
        void GenRenderbuffers(Int32 n, [OutAttribute] out UInt32 renderbuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* renderbuffers_ptr = &renderbuffers)
                    {
                        Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                        renderbuffers = *renderbuffers_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static
        unsafe void GenRenderbuffers(Int32 n, [OutAttribute] UInt32* renderbuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version32", Version = "3.2", EntryPoint = "glGetBufferParameteri64v")]
        public static
        void GetBufferParameteri64(OpenTK.Graphics.OpenGL.Version32 target, OpenTK.Graphics.OpenGL.Version32 pname, [OutAttribute] Int64[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int64* @params_ptr = @params)
                    {
                        Delegates.glGetBufferParameteri64v((OpenTK.Graphics.OpenGL.Version32)target, (OpenTK.Graphics.OpenGL.Version32)pname, (Int64*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version32", Version = "3.2", EntryPoint = "glGetBufferParameteri64v")]
        public static
        void GetBufferParameteri64(OpenTK.Graphics.OpenGL.Version32 target, OpenTK.Graphics.OpenGL.Version32 pname, [OutAttribute] out Int64 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int64* @params_ptr = &@params)
                    {
                        Delegates.glGetBufferParameteri64v((OpenTK.Graphics.OpenGL.Version32)target, (OpenTK.Graphics.OpenGL.Version32)pname, (Int64*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        /// <summary>
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static
        void GetProgramInfoLog(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)infoLog);
                        length = *length_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static
        unsafe void GetProgramInfoLog(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length, (StringBuilder)infoLog);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static
        void GetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)infoLog);
                        length = *length_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static
        unsafe void GetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length, (StringBuilder)infoLog);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static
        void GetProgram(Int32 program, OpenTK.Graphics.OpenGL.ProgramParameter pname, [OutAttribute] Int32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.OpenGL.ProgramParameter)pname, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static
        void GetProgram(Int32 program, OpenTK.Graphics.OpenGL.ProgramParameter pname, [OutAttribute] out Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.OpenGL.ProgramParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static
        unsafe void GetProgram(Int32 program, OpenTK.Graphics.OpenGL.ProgramParameter pname, [OutAttribute] Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.OpenGL.ProgramParameter)pname, (Int32*)@params);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static
        void GetProgram(UInt32 program, OpenTK.Graphics.OpenGL.ProgramParameter pname, [OutAttribute] Int32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.OpenGL.ProgramParameter)pname, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static
        void GetProgram(UInt32 program, OpenTK.Graphics.OpenGL.ProgramParameter pname, [OutAttribute] out Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.OpenGL.ProgramParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static
        unsafe void GetProgram(UInt32 program, OpenTK.Graphics.OpenGL.ProgramParameter pname, [OutAttribute] Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.OpenGL.ProgramParameter)pname, (Int32*)@params);
#if DEBUG
            }
#endif
        }


        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
        public static
        void GetRenderbufferParameter(OpenTK.Graphics.OpenGL.RenderbufferTarget target, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute] Int32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetRenderbufferParameteriv((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
        public static
        void GetRenderbufferParameter(OpenTK.Graphics.OpenGL.RenderbufferTarget target, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute] out Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetRenderbufferParameteriv((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glIsRenderbuffer")]
        public static
        bool IsRenderbuffer(Int32 renderbuffer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glIsRenderbuffer((UInt32)renderbuffer);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glIsRenderbuffer")]
        public static
        bool IsRenderbuffer(UInt32 renderbuffer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glIsRenderbuffer((UInt32)renderbuffer);
#if DEBUG
            }
#endif
        }
        //        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glIsRenderbuffer")]
        //        public static
        //        bool IsRenderbuffer(Int32 renderbuffer)
        //        {
        //#if DEBUG
        //            using (new ErrorHelper(GraphicsContext.CurrentContext))
        //            {
        //#endif
        //                return Delegates.glIsRenderbuffer((UInt32)renderbuffer);
        //#if DEBUG
        //            }
        //#endif
        //        }


        /// <summary>
        /// Determines if a name corresponds to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies a potential program object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glIsProgram")]
        public static
        bool IsProgram(Int32 program)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glIsProgram((UInt32)program);
#if DEBUG
            }
#endif
        }



        /// <summary>
        /// Determines if a name corresponds to a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies a potential shader object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glIsShader")]
        public static
        bool IsShader(Int32 shader)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glIsShader((UInt32)shader);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbMapBufferRange", Version = "3.0", EntryPoint = "glMapBufferRange")]
        public static
        unsafe System.IntPtr MapBufferRange(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr length, OpenTK.Graphics.OpenGL.BufferAccessMask access)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glMapBufferRange((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)length, (OpenTK.Graphics.OpenGL.BufferAccessMask)access);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Determines if a name corresponds to a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies a potential shader object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glIsShader")]
        public static
        bool IsShader(UInt32 shader)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glIsShader((UInt32)shader);
#if DEBUG
            }
#endif
        }
        /// <summary>
        /// Determines if a name corresponds to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies a potential program object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glIsProgram")]
        public static
        bool IsProgram(UInt32 program)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glIsProgram((UInt32)program);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Creates a program object
        /// </summary>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glCreateProgram")]
        public static
        Int32 CreateProgram()
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glCreateProgram();
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Creates a shader object
        /// </summary>
        /// <param name="shaderType">
        /// <para>
        /// Specifies the type of shader to be created. Must be either GL_VERTEX_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glCreateShader")]
        public static
        Int32 CreateShader(OpenTK.Graphics.OpenGL.ShaderType type)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glCreateShader((OpenTK.Graphics.OpenGL.ShaderType)type);
#if DEBUG
            }
#endif
        }


        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glDisablei")]
        public static
        void Disable(OpenTK.Graphics.OpenGL.IndexedEnableCap target, Int32 index)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDisablei((OpenTK.Graphics.OpenGL.IndexedEnableCap)target, (UInt32)index);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glDisablei")]
        public static
        void Disable(OpenTK.Graphics.OpenGL.IndexedEnableCap target, UInt32 index)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDisablei((OpenTK.Graphics.OpenGL.IndexedEnableCap)target, (UInt32)index);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDisableVertexAttribArray")]
        public static
        void DisableVertexAttribArray(Int32 index)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDisableVertexAttribArray((UInt32)index);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDisableVertexAttribArray")]
        public static
        void DisableVertexAttribArray(UInt32 index)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDisableVertexAttribArray((UInt32)index);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static
        void GenVertexArrays(Int32 n, [OutAttribute] Int32[] arrays)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* arrays_ptr = arrays)
                    {
                        Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static
        void GenVertexArrays(Int32 n, [OutAttribute] out Int32 arrays)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* arrays_ptr = &arrays)
                    {
                        Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                        arrays = *arrays_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static
        unsafe void GenVertexArrays(Int32 n, [OutAttribute] Int32* arrays)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static
        void GenVertexArrays(Int32 n, [OutAttribute] UInt32[] arrays)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* arrays_ptr = arrays)
                    {
                        Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static
        void GenVertexArrays(Int32 n, [OutAttribute] out UInt32 arrays)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* arrays_ptr = &arrays)
                    {
                        Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                        arrays = *arrays_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static
        unsafe void GenVertexArrays(Int32 n, [OutAttribute] UInt32* arrays)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static
        void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL.ActiveAttribType type, [OutAttribute] StringBuilder name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (OpenTK.Graphics.OpenGL.ActiveAttribType* type_ptr = &type)
                    {
                        Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type_ptr, (StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static
        unsafe void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL.ActiveAttribType* type, [OutAttribute] StringBuilder name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type, (StringBuilder)name);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static
        void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL.ActiveAttribType type, [OutAttribute] StringBuilder name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (OpenTK.Graphics.OpenGL.ActiveAttribType* type_ptr = &type)
                    {
                        Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type_ptr, (StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static
        unsafe void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL.ActiveAttribType* type, [OutAttribute] StringBuilder name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type, (StringBuilder)name);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static
        void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL.ActiveUniformType type, [OutAttribute] StringBuilder name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (OpenTK.Graphics.OpenGL.ActiveUniformType* type_ptr = &type)
                    {
                        Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ActiveUniformType*)type_ptr, (StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static
        unsafe void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL.ActiveUniformType* type, [OutAttribute] StringBuilder name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ActiveUniformType*)type, (StringBuilder)name);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static
        void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL.ActiveUniformType type, [OutAttribute] StringBuilder name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (OpenTK.Graphics.OpenGL.ActiveUniformType* type_ptr = &type)
                    {
                        Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ActiveUniformType*)type_ptr, (StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static
        unsafe void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL.ActiveUniformType* type, [OutAttribute] StringBuilder name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ActiveUniformType*)type, (StringBuilder)name);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
        public static
        void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter pname, [OutAttribute] Int32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
        public static
        void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter pname, [OutAttribute] out Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
        public static
        unsafe void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter pname, [OutAttribute] Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter)pname, (Int32*)@params);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
        public static
        void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter pname, [OutAttribute] Int32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
        public static
        void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter pname, [OutAttribute] out Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
        public static
        unsafe void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter pname, [OutAttribute] Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (OpenTK.Graphics.OpenGL.ActiveUniformBlockParameter)pname, (Int32*)@params);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetActiveUniformBlockName")]
        public static
        void GetActiveUniformBlockName(Int32 program, Int32 uniformBlockIndex, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder uniformBlockName)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glGetActiveUniformBlockName((UInt32)program, (UInt32)uniformBlockIndex, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)uniformBlockName);
                        length = *length_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetActiveUniformBlockName")]
        public static
        unsafe void GetActiveUniformBlockName(Int32 program, Int32 uniformBlockIndex, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder uniformBlockName)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetActiveUniformBlockName((UInt32)program, (UInt32)uniformBlockIndex, (Int32)bufSize, (Int32*)length, (StringBuilder)uniformBlockName);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetActiveUniformBlockName")]
        public static
        void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder uniformBlockName)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glGetActiveUniformBlockName((UInt32)program, (UInt32)uniformBlockIndex, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)uniformBlockName);
                        length = *length_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetActiveUniformBlockName")]
        public static
        unsafe void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder uniformBlockName)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetActiveUniformBlockName((UInt32)program, (UInt32)uniformBlockIndex, (Int32)bufSize, (Int32*)length, (StringBuilder)uniformBlockName);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetActiveUniformName")]
        public static
        void GetActiveUniformName(Int32 program, Int32 uniformIndex, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder uniformName)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glGetActiveUniformName((UInt32)program, (UInt32)uniformIndex, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)uniformName);
                        length = *length_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetActiveUniformName")]
        public static
        unsafe void GetActiveUniformName(Int32 program, Int32 uniformIndex, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder uniformName)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetActiveUniformName((UInt32)program, (UInt32)uniformIndex, (Int32)bufSize, (Int32*)length, (StringBuilder)uniformName);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetActiveUniformName")]
        public static
        void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder uniformName)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glGetActiveUniformName((UInt32)program, (UInt32)uniformIndex, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)uniformName);
                        length = *length_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetActiveUniformName")]
        public static
        unsafe void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder uniformName)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetActiveUniformName((UInt32)program, (UInt32)uniformIndex, (Int32)bufSize, (Int32*)length, (StringBuilder)uniformName);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
        public static
        void GetActiveUniforms(Int32 program, Int32 uniformCount, Int32[] uniformIndices, OpenTK.Graphics.OpenGL.ActiveUniformParameter pname, [OutAttribute] Int32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* uniformIndices_ptr = uniformIndices)
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (OpenTK.Graphics.OpenGL.ActiveUniformParameter)pname, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
        public static
        void GetActiveUniforms(Int32 program, Int32 uniformCount, ref Int32 uniformIndices, OpenTK.Graphics.OpenGL.ActiveUniformParameter pname, [OutAttribute] out Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* uniformIndices_ptr = &uniformIndices)
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (OpenTK.Graphics.OpenGL.ActiveUniformParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
        public static
        unsafe void GetActiveUniforms(Int32 program, Int32 uniformCount, Int32* uniformIndices, OpenTK.Graphics.OpenGL.ActiveUniformParameter pname, [OutAttribute] Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices, (OpenTK.Graphics.OpenGL.ActiveUniformParameter)pname, (Int32*)@params);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
        public static
        void GetActiveUniforms(UInt32 program, Int32 uniformCount, UInt32[] uniformIndices, OpenTK.Graphics.OpenGL.ActiveUniformParameter pname, [OutAttribute] Int32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* uniformIndices_ptr = uniformIndices)
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (OpenTK.Graphics.OpenGL.ActiveUniformParameter)pname, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
        public static
        void GetActiveUniforms(UInt32 program, Int32 uniformCount, ref UInt32 uniformIndices, OpenTK.Graphics.OpenGL.ActiveUniformParameter pname, [OutAttribute] out Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* uniformIndices_ptr = &uniformIndices)
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (OpenTK.Graphics.OpenGL.ActiveUniformParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
        public static
        unsafe void GetActiveUniforms(UInt32 program, Int32 uniformCount, UInt32* uniformIndices, OpenTK.Graphics.OpenGL.ActiveUniformParameter pname, [OutAttribute] Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices, (OpenTK.Graphics.OpenGL.ActiveUniformParameter)pname, (Int32*)@params);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in objects.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static
        void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] out Int32 obj)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    fixed (Int32* obj_ptr = &obj)
                    {
                        Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                        count = *count_ptr;
                        obj = *obj_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in objects.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static
        unsafe void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] Int32[] obj)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                fixed (Int32* obj_ptr = obj)
                {
                    Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj_ptr);
                }
#if DEBUG
            }
#endif
        }




        /// <summary>
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in objects.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static
        unsafe void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] Int32* obj)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in objects.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static
        void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] out UInt32 obj)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    fixed (UInt32* obj_ptr = &obj)
                    {
                        Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                        count = *count_ptr;
                        obj = *obj_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in objects.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static
        unsafe void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] UInt32[] obj)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                fixed (UInt32* obj_ptr = obj)
                {
                    Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj_ptr);
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in objects.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static
        unsafe void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] UInt32* obj)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the location of an attribute variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetAttribLocation")]
        public static
        Int32 GetAttribLocation(Int32 program, String name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glGetAttribLocation((UInt32)program, (String)name);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the location of an attribute variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetAttribLocation")]
        public static
        Int32 GetAttribLocation(UInt32 program, String name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glGetAttribLocation((UInt32)program, (String)name);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static
        void GetBoolean(OpenTK.Graphics.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute] bool[] data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetBooleani_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (bool*)data_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static
        void GetBoolean(OpenTK.Graphics.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute] out bool data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetBooleani_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static
        unsafe void GetBoolean(OpenTK.Graphics.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute] bool* data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetBooleani_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (bool*)data);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static
        void GetBoolean(OpenTK.Graphics.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute] bool[] data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetBooleani_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (bool*)data_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static
        void GetBoolean(OpenTK.Graphics.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute] out bool data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetBooleani_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static
        unsafe void GetBoolean(OpenTK.Graphics.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute] bool* data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetBooleani_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (bool*)data);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Detaches a shader object from a program object to which it is attached
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object from which to detach the shader object.
        /// </para>
        /// </param>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be detached.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDetachShader")]
        public static
        void DetachShader(Int32 program, Int32 shader)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDetachShader((UInt32)program, (UInt32)shader);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Detaches a shader object from a program object to which it is attached
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object from which to detach the shader object.
        /// </para>
        /// </param>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be detached.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDetachShader")]
        public static
        void DetachShader(UInt32 program, UInt32 shader)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDetachShader((UInt32)program, (UInt32)shader);
#if DEBUG
            }
#endif
        }

        /// <summary>
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static
        void GetShaderInfoLog(Int32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)infoLog);
                        length = *length_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static
        unsafe void GetShaderInfoLog(Int32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length, (StringBuilder)infoLog);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static
        void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)infoLog);
                        length = *length_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static
        unsafe void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length, (StringBuilder)infoLog);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static
        void GetShader(Int32 shader, OpenTK.Graphics.OpenGL.ShaderParameter pname, [OutAttribute] Int32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.OpenGL.ShaderParameter)pname, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static
        void GetShader(Int32 shader, OpenTK.Graphics.OpenGL.ShaderParameter pname, [OutAttribute] out Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.OpenGL.ShaderParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static
        unsafe void GetShader(Int32 shader, OpenTK.Graphics.OpenGL.ShaderParameter pname, [OutAttribute] Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.OpenGL.ShaderParameter)pname, (Int32*)@params);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static
        void GetShader(UInt32 shader, OpenTK.Graphics.OpenGL.ShaderParameter pname, [OutAttribute] Int32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.OpenGL.ShaderParameter)pname, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static
        void GetShader(UInt32 shader, OpenTK.Graphics.OpenGL.ShaderParameter pname, [OutAttribute] out Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.OpenGL.ShaderParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static
        unsafe void GetShader(UInt32 shader, OpenTK.Graphics.OpenGL.ShaderParameter pname, [OutAttribute] Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.OpenGL.ShaderParameter)pname, (Int32*)@params);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static
        void GetShaderSource(Int32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder source)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)source);
                        length = *length_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static
        unsafe void GetShaderSource(Int32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder source)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length, (StringBuilder)source);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static
        void GetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder source)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)source);
                        length = *length_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static
        unsafe void GetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder source)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length, (StringBuilder)source);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// <para>
        /// Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, GL_SHADING_LANGUAGE_VERSION, or GL_EXTENSIONS.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetStringi")]
        public static
        System.String GetString(OpenTK.Graphics.OpenGL.StringName name, Int32 index)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe { return new string((sbyte*)Delegates.glGetStringi((OpenTK.Graphics.OpenGL.StringName)name, (UInt32)index)); }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// <para>
        /// Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, GL_SHADING_LANGUAGE_VERSION, or GL_EXTENSIONS.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetStringi")]
        public static
        System.String GetString(OpenTK.Graphics.OpenGL.StringName name, UInt32 index)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe { return new string((sbyte*)Delegates.glGetStringi((OpenTK.Graphics.OpenGL.StringName)name, (UInt32)index)); }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Double[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Double*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] out Double @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static
        unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Double* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Double*)@params);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Single[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Single*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] out Single @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static
        unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Single* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Single*)@params);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Single[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Single*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] out Single @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static
        unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Single* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Single*)@params);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static
        void GetVertexAttribI(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] out Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static
        unsafe void GetVertexAttribI(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static
        void GetVertexAttribI(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] out Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static
        unsafe void GetVertexAttribI(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        public static
        void GetVertexAttribI(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] out UInt32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribIuiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        public static
        unsafe void GetVertexAttribI(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] UInt32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetVertexAttribIuiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (UInt32*)@params);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Int32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] out Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static
        unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Int32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] out Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static
        unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Int32*)@params);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameter pname, [OutAttribute] IntPtr pointer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[, ,] pointer)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T2)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameter pname, [OutAttribute] IntPtr pointer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[, ,] pointer)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static
        void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.OpenGL.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T2)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetUniformIndices")]
        public static
        void GetUniformIndices(UInt32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] out UInt32 uniformIndices)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* uniformIndices_ptr = &uniformIndices)
                    {
                        Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, (String[])uniformNames, (UInt32*)uniformIndices_ptr);
                        uniformIndices = *uniformIndices_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetUniformIndices")]
        public static
        unsafe void GetUniformIndices(UInt32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] UInt32* uniformIndices)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, (String[])uniformNames, (UInt32*)uniformIndices);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static
        void GetUniform(Int32 program, Int32 location, [OutAttribute] Int32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static
        void GetUniform(Int32 program, Int32 location, [OutAttribute] out Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static
        unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute] Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static
        void GetUniform(UInt32 program, Int32 location, [OutAttribute] Int32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static
        void GetUniform(UInt32 program, Int32 location, [OutAttribute] out Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static
        unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the location of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformLocation")]
        public static
        Int32 GetUniformLocation(Int32 program, String name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glGetUniformLocation((UInt32)program, (String)name);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the location of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformLocation")]
        public static
        Int32 GetUniformLocation(UInt32 program, String name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glGetUniformLocation((UInt32)program, (String)name);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        public static
        void GetUniform(UInt32 program, Int32 location, [OutAttribute] UInt32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetUniformuiv((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        public static
        void GetUniform(UInt32 program, Int32 location, [OutAttribute] out UInt32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformuiv((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        public static
        unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] UInt32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetUniformuiv((UInt32)program, (Int32)location, (UInt32*)@params);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Double[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Double*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] out Double @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static
        unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.OpenGL.VertexAttribParameter pname, [OutAttribute] Double* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.OpenGL.VertexAttribParameter)pname, (Double*)@params);
#if DEBUG
            }
#endif
        }



        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static
        unsafe void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL.ActiveAttribType* type, [OutAttribute] StringBuilder name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type, (StringBuilder)name);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetUniformBlockIndex")]
        public static
        Int32 GetUniformBlockIndex(Int32 program, String uniformBlockName)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glGetUniformBlockIndex((UInt32)program, (String)uniformBlockName);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetUniformBlockIndex")]
        public static
        Int32 GetUniformBlockIndex(UInt32 program, String uniformBlockName)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glGetUniformBlockIndex((UInt32)program, (String)uniformBlockName);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static
        void GetUniform(Int32 program, Int32 location, [OutAttribute] Single[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static
        void GetUniform(Int32 program, Int32 location, [OutAttribute] out Single @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static
        unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute] Single* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static
        void GetUniform(UInt32 program, Int32 location, [OutAttribute] Single[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static
        void GetUniform(UInt32 program, Int32 location, [OutAttribute] out Single @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static
        unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] Single* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetUniformIndices")]
        public static
        void GetUniformIndices(Int32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] Int32[] uniformIndices)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* uniformIndices_ptr = uniformIndices)
                    {
                        Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, (String[])uniformNames, (UInt32*)uniformIndices_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetUniformIndices")]
        public static
        void GetUniformIndices(Int32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] out Int32 uniformIndices)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* uniformIndices_ptr = &uniformIndices)
                    {
                        Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, (String[])uniformNames, (UInt32*)uniformIndices_ptr);
                        uniformIndices = *uniformIndices_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetUniformIndices")]
        public static
        unsafe void GetUniformIndices(Int32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] Int32* uniformIndices)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, (String[])uniformNames, (UInt32*)uniformIndices);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glGetUniformIndices")]
        public static
        void GetUniformIndices(UInt32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] UInt32[] uniformIndices)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* uniformIndices_ptr = uniformIndices)
                    {
                        Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, (String[])uniformNames, (UInt32*)uniformIndices_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static
        void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL.ActiveAttribType type, [OutAttribute] StringBuilder name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (OpenTK.Graphics.OpenGL.ActiveAttribType* type_ptr = &type)
                    {
                        Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type_ptr, (StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static
        unsafe void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.OpenGL.ActiveAttribType* type, [OutAttribute] StringBuilder name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type, (StringBuilder)name);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static
        void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.OpenGL.ActiveAttribType type, [OutAttribute] StringBuilder name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (OpenTK.Graphics.OpenGL.ActiveAttribType* type_ptr = &type)
                    {
                        Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.OpenGL.ActiveAttribType*)type_ptr, (StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set front and/or back stencil test actions
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="sfail">
        /// <para>
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: GL_KEEP, GL_ZERO, GL_REPLACE, GL_INCR, GL_INCR_WRAP, GL_DECR, GL_DECR_WRAP, and GL_INVERT. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dpfail">
        /// <para>
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dppass">
        /// <para>
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glStencilOpSeparate")]
        public static
        void StencilOpSeparate(OpenTK.Graphics.OpenGL.StencilFace face, OpenTK.Graphics.OpenGL.StencilOp sfail, OpenTK.Graphics.OpenGL.StencilOp dpfail, OpenTK.Graphics.OpenGL.StencilOp dppass)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glStencilOpSeparate((OpenTK.Graphics.OpenGL.StencilFace)face, (OpenTK.Graphics.OpenGL.StencilOp)sfail, (OpenTK.Graphics.OpenGL.StencilOp)dpfail, (OpenTK.Graphics.OpenGL.StencilOp)dppass);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version31", Version = "3.1", EntryPoint = "glTexBuffer")]
        public static
        void TexBuffer(OpenTK.Graphics.OpenGL.TextureBufferTarget target, OpenTK.Graphics.OpenGL.SizedInternalFormat internalformat, Int32 buffer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glTexBuffer((OpenTK.Graphics.OpenGL.TextureBufferTarget)target, (OpenTK.Graphics.OpenGL.SizedInternalFormat)internalformat, (UInt32)buffer);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version31", Version = "3.1", EntryPoint = "glTexBuffer")]
        public static
        void TexBuffer(OpenTK.Graphics.OpenGL.TextureBufferTarget target, OpenTK.Graphics.OpenGL.SizedInternalFormat internalformat, UInt32 buffer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glTexBuffer((OpenTK.Graphics.OpenGL.TextureBufferTarget)target, (OpenTK.Graphics.OpenGL.SizedInternalFormat)internalformat, (UInt32)buffer);
#if DEBUG
            }
#endif
        }




        /// <summary>
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        public static
        void StencilMaskSeparate(OpenTK.Graphics.OpenGL.StencilFace face, Int32 mask)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glStencilMaskSeparate((OpenTK.Graphics.OpenGL.StencilFace)face, (UInt32)mask);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        public static
        void StencilMaskSeparate(OpenTK.Graphics.OpenGL.StencilFace face, UInt32 mask)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glStencilMaskSeparate((OpenTK.Graphics.OpenGL.StencilFace)face, (UInt32)mask);
#if DEBUG
            }
#endif
        }

        /// <summary>
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        public static
        void StencilFuncSeparate(OpenTK.Graphics.OpenGL.StencilFace face, OpenTK.Graphics.OpenGL.StencilFunction func, Int32 @ref, Int32 mask)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glStencilFuncSeparate((OpenTK.Graphics.OpenGL.StencilFace)face, (OpenTK.Graphics.OpenGL.StencilFunction)func, (Int32)@ref, (UInt32)mask);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        public static
        void StencilFuncSeparate(OpenTK.Graphics.OpenGL.StencilFace face, OpenTK.Graphics.OpenGL.StencilFunction func, Int32 @ref, UInt32 mask)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glStencilFuncSeparate((OpenTK.Graphics.OpenGL.StencilFace)face, (OpenTK.Graphics.OpenGL.StencilFunction)func, (Int32)@ref, (UInt32)mask);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Links a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object to be linked.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glLinkProgram")]
        public static
        void LinkProgram(Int32 program)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glLinkProgram((UInt32)program);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Links a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object to be linked.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glLinkProgram")]
        public static
        void LinkProgram(UInt32 program)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glLinkProgram((UInt32)program);
#if DEBUG
            }
#endif
        }

        //        [System.CLSCompliant(false)]
        //        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glIsRenderbuffer")]
        //        public static
        //        bool IsRenderbuffer(UInt32 renderbuffer)
        //        {
        //#if DEBUG
        //            using (new ErrorHelper(GraphicsContext.CurrentContext))
        //            {
        //#endif
        //                return Delegates.glIsRenderbuffer((UInt32)renderbuffer);
        //#if DEBUG
        //            }
        //#endif
        //        }




        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        public static
        void TexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glTexParameterIiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        public static
        void TexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, ref Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glTexParameterIiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        public static
        unsafe void TexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glTexParameterIiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (Int32*)@params);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        public static
        void TexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, UInt32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glTexParameterIuiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        public static
        void TexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, ref UInt32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glTexParameterIuiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        public static
        unsafe void TexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.TextureParameterName pname, UInt32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glTexParameterIuiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.TextureParameterName)pname, (UInt32*)@params);
#if DEBUG
            }
#endif
        }



        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glIsVertexArray")]
        public static
        bool IsVertexArray(Int32 array)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glIsVertexArray((UInt32)array);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glIsVertexArray")]
        public static
        bool IsVertexArray(UInt32 array)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glIsVertexArray((UInt32)array);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap">
        /// <para>
        /// Specifies a symbolic constant indicating a GL capability.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glIsEnabledi")]
        public static
        bool IsEnabled(OpenTK.Graphics.OpenGL.IndexedEnableCap target, Int32 index)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glIsEnabledi((OpenTK.Graphics.OpenGL.IndexedEnableCap)target, (UInt32)index);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap">
        /// <para>
        /// Specifies a symbolic constant indicating a GL capability.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glIsEnabledi")]
        public static
        bool IsEnabled(OpenTK.Graphics.OpenGL.IndexedEnableCap target, UInt32 index)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glIsEnabledi((OpenTK.Graphics.OpenGL.IndexedEnableCap)target, (UInt32)index);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glIsFramebuffer")]
        public static
        bool IsFramebuffer(Int32 framebuffer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glIsFramebuffer((UInt32)framebuffer);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glIsFramebuffer")]
        public static
        bool IsFramebuffer(UInt32 framebuffer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glIsFramebuffer((UInt32)framebuffer);
#if DEBUG
            }
#endif
        }



        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        public static
        void GetTexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTexParameterIiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        public static
        void GetTexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTexParameterIiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        public static
        unsafe void GetTexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetTexParameterIiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (Int32*)@params);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        public static
        void GetTexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] UInt32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetTexParameterIuiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        public static
        void GetTexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] out UInt32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetTexParameterIuiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        public static
        unsafe void GetTexParameterI(OpenTK.Graphics.OpenGL.TextureTarget target, OpenTK.Graphics.OpenGL.GetTextureParameter pname, [OutAttribute] UInt32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetTexParameterIuiv((OpenTK.Graphics.OpenGL.TextureTarget)target, (OpenTK.Graphics.OpenGL.GetTextureParameter)pname, (UInt32*)@params);
#if DEBUG
            }
#endif
        }


        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static
        void GetInteger(OpenTK.Graphics.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute] Int32[] data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetIntegeri_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static
        void GetInteger(OpenTK.Graphics.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute] out Int32 data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetIntegeri_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static
        unsafe void GetInteger(OpenTK.Graphics.OpenGL.GetIndexedPName target, Int32 index, [OutAttribute] Int32* data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetIntegeri_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (Int32*)data);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static
        void GetInteger(OpenTK.Graphics.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute] Int32[] data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetIntegeri_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static
        void GetInteger(OpenTK.Graphics.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute] out Int32 data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetIntegeri_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static
        unsafe void GetInteger(OpenTK.Graphics.OpenGL.GetIndexedPName target, UInt32 index, [OutAttribute] Int32* data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetIntegeri_v((OpenTK.Graphics.OpenGL.GetIndexedPName)target, (UInt32)index, (Int32*)data);
#if DEBUG
            }
#endif
        }


        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetFragDataLocation")]
        public static
        Int32 GetFragDataLocation(Int32 program, String name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glGetFragDataLocation((UInt32)program, (String)name);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetFragDataLocation")]
        public static
        Int32 GetFragDataLocation(UInt32 program, String name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glGetFragDataLocation((UInt32)program, (String)name);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        public static
        void GetFramebufferAttachmentParameter(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.FramebufferParameterName pname, [OutAttribute] Int32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFramebufferAttachmentParameteriv((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.FramebufferParameterName)pname, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        public static
        void GetFramebufferAttachmentParameter(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.FramebufferParameterName pname, [OutAttribute] out Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFramebufferAttachmentParameteriv((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.FramebufferParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        public static
        unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.FramebufferParameterName pname, [OutAttribute] Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetFramebufferAttachmentParameteriv((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.FramebufferParameterName)pname, (Int32*)@params);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
        public static
        void FramebufferTextureLayer(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 layer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glFramebufferTextureLayer((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
        public static
        void FramebufferTextureLayer(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 layer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glFramebufferTextureLayer((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
#if DEBUG
            }
#endif
        }


        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glFramebufferTexture1D")]
        public static
        void FramebufferTexture1D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, Int32 texture, Int32 level)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glFramebufferTexture1D((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glFramebufferTexture1D")]
        public static
        void FramebufferTexture1D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, UInt32 texture, Int32 level)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glFramebufferTexture1D((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glFramebufferTexture2D")]
        public static
        void FramebufferTexture2D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, Int32 texture, Int32 level)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glFramebufferTexture2D((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glFramebufferTexture2D")]
        public static
        void FramebufferTexture2D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, UInt32 texture, Int32 level)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glFramebufferTexture2D((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glFramebufferTexture3D")]
        public static
        void FramebufferTexture3D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, Int32 texture, Int32 level, Int32 zoffset)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glFramebufferTexture3D((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glFramebufferTexture3D")]
        public static
        void FramebufferTexture3D(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.TextureTarget textarget, UInt32 texture, Int32 level, Int32 zoffset)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glFramebufferTexture3D((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glFramebufferRenderbuffer")]
        public static
        void FramebufferRenderbuffer(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.RenderbufferTarget renderbuffertarget, Int32 renderbuffer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glFramebufferRenderbuffer((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glFramebufferRenderbuffer")]
        public static
        void FramebufferRenderbuffer(OpenTK.Graphics.OpenGL.FramebufferTarget target, OpenTK.Graphics.OpenGL.FramebufferAttachment attachment, OpenTK.Graphics.OpenGL.RenderbufferTarget renderbuffertarget, UInt32 renderbuffer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glFramebufferRenderbuffer((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (OpenTK.Graphics.OpenGL.FramebufferAttachment)attachment, (OpenTK.Graphics.OpenGL.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
#if DEBUG
            }
#endif
        }
        [AutoGenerated(Category = "ArbMapBufferRange", Version = "3.0", EntryPoint = "glFlushMappedBufferRange")]
        public static
        void FlushMappedBufferRange(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr length)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glFlushMappedBufferRange((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)length);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static
        void DeleteVertexArrays(Int32 n, Int32[] arrays)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* arrays_ptr = arrays)
                    {
                        Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static
        void DeleteVertexArrays(Int32 n, ref Int32 arrays)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* arrays_ptr = &arrays)
                    {
                        Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static
        unsafe void DeleteVertexArrays(Int32 n, Int32* arrays)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static
        void DeleteVertexArrays(Int32 n, UInt32[] arrays)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* arrays_ptr = arrays)
                    {
                        Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static
        void DeleteVertexArrays(Int32 n, ref UInt32 arrays)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* arrays_ptr = &arrays)
                    {
                        Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static
        unsafe void DeleteVertexArrays(Int32 n, UInt32* arrays)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glEndConditionalRender")]
        public static
        void EndConditionalRender()
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glEndConditionalRender();
#if DEBUG
            }
#endif
        }


        [AutoGenerated(Category = "ArbCopyBuffer", Version = "3.0", EntryPoint = "glCopyBufferSubData")]
        public static
        void CopyBufferSubData(OpenTK.Graphics.OpenGL.BufferTarget readTarget, OpenTK.Graphics.OpenGL.BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glCopyBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)readTarget, (OpenTK.Graphics.OpenGL.BufferTarget)writeTarget, (IntPtr)readOffset, (IntPtr)writeOffset, (IntPtr)size);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all GL_TRUE, indicating that the color components can be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glColorMaski")]
        public static
        void ColorMask(Int32 index, bool r, bool g, bool b, bool a)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glColorMaski((UInt32)index, (bool)r, (bool)g, (bool)b, (bool)a);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all GL_TRUE, indicating that the color components can be written.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glColorMaski")]
        public static
        void ColorMask(UInt32 index, bool r, bool g, bool b, bool a)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glColorMaski((UInt32)index, (bool)r, (bool)g, (bool)b, (bool)a);
#if DEBUG
            }
#endif
        }
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glEndTransformFeedback")]
        public static
        void EndTransformFeedback()
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glEndTransformFeedback();
#if DEBUG
            }
#endif
        }


        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
        public static
        unsafe void GetRenderbufferParameter(OpenTK.Graphics.OpenGL.RenderbufferTarget target, OpenTK.Graphics.OpenGL.RenderbufferParameterName pname, [OutAttribute] Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetRenderbufferParameteriv((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (OpenTK.Graphics.OpenGL.RenderbufferParameterName)pname, (Int32*)@params);
#if DEBUG
            }
#endif
        }
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version32", Version = "3.2", EntryPoint = "glGetBufferParameteri64v")]
        public static
        unsafe void GetBufferParameteri64(OpenTK.Graphics.OpenGL.Version32 target, OpenTK.Graphics.OpenGL.Version32 pname, [OutAttribute] Int64* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetBufferParameteri64v((OpenTK.Graphics.OpenGL.Version32)target, (OpenTK.Graphics.OpenGL.Version32)pname, (Int64*)@params);
#if DEBUG
            }
#endif
        }
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static
        unsafe void GenFramebuffers(Int32 n, [OutAttribute] UInt32* framebuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers);
#if DEBUG
            }
#endif
        }

        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform1f")]
        public static
        void Uniform1(Int32 location, Single v0)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform1f((Int32)location, (Single)v0);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform1fv")]
        public static
        void Uniform1(Int32 location, Int32 count, Single[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform1fv")]
        public static
        void Uniform1(Int32 location, Int32 count, ref Single value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform1fv")]
        public static
        unsafe void Uniform1(Int32 location, Int32 count, Single* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)value);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform1i")]
        public static
        void Uniform1(Int32 location, Int32 v0)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform1i((Int32)location, (Int32)v0);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform1iv")]
        public static
        void Uniform1(Int32 location, Int32 count, Int32[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform1iv")]
        public static
        void Uniform1(Int32 location, Int32 count, ref Int32 value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform1iv")]
        public static
        unsafe void Uniform1(Int32 location, Int32 count, Int32* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)value);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform1ui")]
        public static
        void Uniform1(Int32 location, UInt32 v0)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform1ui((Int32)location, (UInt32)v0);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform1uiv")]
        public static
        void Uniform1(Int32 location, Int32 count, UInt32[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glUniform1uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform1uiv")]
        public static
        void Uniform1(Int32 location, Int32 count, ref UInt32 value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glUniform1uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform1uiv")]
        public static
        unsafe void Uniform1(Int32 location, Int32 count, UInt32* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform1uiv((Int32)location, (Int32)count, (UInt32*)value);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform2f")]
        public static
        void Uniform2(Int32 location, Single v0, Single v1)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform2f((Int32)location, (Single)v0, (Single)v1);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform2fv")]
        public static
        void Uniform2(Int32 location, Int32 count, Single[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform2fv")]
        public static
        void Uniform2(Int32 location, Int32 count, ref Single value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform2fv")]
        public static
        unsafe void Uniform2(Int32 location, Int32 count, Single* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)value);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform2i")]
        public static
        void Uniform2(Int32 location, Int32 v0, Int32 v1)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform2i((Int32)location, (Int32)v0, (Int32)v1);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform2iv")]
        public static
        void Uniform2(Int32 location, Int32 count, Int32[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform2iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform2iv")]
        public static
        unsafe void Uniform2(Int32 location, Int32 count, Int32* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform2iv((Int32)location, (Int32)count, (Int32*)value);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform2ui")]
        public static
        void Uniform2(Int32 location, UInt32 v0, UInt32 v1)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform2ui((Int32)location, (UInt32)v0, (UInt32)v1);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform2uiv")]
        public static
        void Uniform2(Int32 location, Int32 count, UInt32[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glUniform2uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform2uiv")]
        public static
        void Uniform2(Int32 location, Int32 count, ref UInt32 value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glUniform2uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform2uiv")]
        public static
        unsafe void Uniform2(Int32 location, Int32 count, UInt32* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform2uiv((Int32)location, (Int32)count, (UInt32*)value);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform3f")]
        public static
        void Uniform3(Int32 location, Single v0, Single v1, Single v2)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform3f((Int32)location, (Single)v0, (Single)v1, (Single)v2);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform3fv")]
        public static
        void Uniform3(Int32 location, Int32 count, Single[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform3fv")]
        public static
        void Uniform3(Int32 location, Int32 count, ref Single value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform3fv")]
        public static
        unsafe void Uniform3(Int32 location, Int32 count, Single* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)value);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform3i")]
        public static
        void Uniform3(Int32 location, Int32 v0, Int32 v1, Int32 v2)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform3i((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform3iv")]
        public static
        void Uniform3(Int32 location, Int32 count, Int32[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform3iv")]
        public static
        void Uniform3(Int32 location, Int32 count, ref Int32 value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform3iv")]
        public static
        unsafe void Uniform3(Int32 location, Int32 count, Int32* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)value);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform3ui")]
        public static
        void Uniform3(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform3ui((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform3uiv")]
        public static
        void Uniform3(Int32 location, Int32 count, UInt32[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glUniform3uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform3uiv")]
        public static
        void Uniform3(Int32 location, Int32 count, ref UInt32 value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glUniform3uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform3uiv")]
        public static
        unsafe void Uniform3(Int32 location, Int32 count, UInt32* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform3uiv((Int32)location, (Int32)count, (UInt32*)value);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform4f")]
        public static
        void Uniform4(Int32 location, Single v0, Single v1, Single v2, Single v3)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform4f((Int32)location, (Single)v0, (Single)v1, (Single)v2, (Single)v3);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform4fv")]
        public static
        void Uniform4(Int32 location, Int32 count, Single[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform4fv")]
        public static
        void Uniform4(Int32 location, Int32 count, ref Single value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform4fv")]
        public static
        unsafe void Uniform4(Int32 location, Int32 count, Single* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)value);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform4i")]
        public static
        void Uniform4(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform4i((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2, (Int32)v3);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform4iv")]
        public static
        void Uniform4(Int32 location, Int32 count, Int32[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform4iv")]
        public static
        void Uniform4(Int32 location, Int32 count, ref Int32 value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }



        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform4iv")]
        public static
        unsafe void Uniform4(Int32 location, Int32 count, Int32* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)value);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform4ui")]
        public static
        void Uniform4(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform4ui((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2, (UInt32)v3);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform4uiv")]
        public static
        void Uniform4(Int32 location, Int32 count, UInt32[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glUniform4uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform4uiv")]
        public static
        void Uniform4(Int32 location, Int32 count, ref UInt32 value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glUniform4uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform4uiv")]
        public static
        unsafe void Uniform4(Int32 location, Int32 count, UInt32* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniform4uiv((Int32)location, (Int32)count, (UInt32*)value);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glUniformBlockBinding")]
        public static
        void UniformBlockBinding(Int32 program, Int32 uniformBlockIndex, Int32 uniformBlockBinding)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniformBlockBinding((UInt32)program, (UInt32)uniformBlockIndex, (UInt32)uniformBlockBinding);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbUniformBufferObject", Version = "2.0", EntryPoint = "glUniformBlockBinding")]
        public static
        void UniformBlockBinding(UInt32 program, UInt32 uniformBlockIndex, UInt32 uniformBlockBinding)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniformBlockBinding((UInt32)program, (UInt32)uniformBlockIndex, (UInt32)uniformBlockBinding);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        public static
        void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        public static
        void UniformMatrix2(Int32 location, Int32 count, bool transpose, ref Single value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        public static
        unsafe void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix2x3fv")]
        public static
        void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Single[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniformMatrix2x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix2x3fv")]
        public static
        void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, ref Single value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniformMatrix2x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix2x3fv")]
        public static
        unsafe void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Single* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniformMatrix2x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix2x4fv")]
        public static
        void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Single[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniformMatrix2x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix2x4fv")]
        public static
        void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, ref Single value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniformMatrix2x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix2x4fv")]
        public static
        unsafe void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Single* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniformMatrix2x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        public static
        void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        public static
        void UniformMatrix3(Int32 location, Int32 count, bool transpose, ref Single value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        public static
        unsafe void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix3x2fv")]
        public static
        void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Single[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniformMatrix3x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix3x2fv")]
        public static
        void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, ref Single value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniformMatrix3x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix3x2fv")]
        public static
        unsafe void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Single* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniformMatrix3x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix3x4fv")]
        public static
        void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Single[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniformMatrix3x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix3x4fv")]
        public static
        void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, ref Single value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniformMatrix3x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix3x4fv")]
        public static
        unsafe void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Single* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniformMatrix3x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        public static
        void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        public static
        void UniformMatrix4(Int32 location, Int32 count, bool transpose, ref Single value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        public static
        unsafe void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix4x2fv")]
        public static
        void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Single[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniformMatrix4x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix4x2fv")]
        public static
        void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, ref Single value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniformMatrix4x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix4x2fv")]
        public static
        unsafe void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Single* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniformMatrix4x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix4x3fv")]
        public static
        void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Single[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniformMatrix4x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix4x3fv")]
        public static
        void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, ref Single value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniformMatrix4x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix4x3fv")]
        public static
        unsafe void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Single* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUniformMatrix4x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glUnmapBuffer")]
        public static
        bool UnmapBuffer(OpenTK.Graphics.OpenGL.BufferTarget target)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glUnmapBuffer((OpenTK.Graphics.OpenGL.BufferTarget)target);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Installs a program object as part of current rendering state
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object whose executables are to be used as part of current rendering state.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUseProgram")]
        public static
        void UseProgram(Int32 program)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUseProgram((UInt32)program);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Installs a program object as part of current rendering state
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object whose executables are to be used as part of current rendering state.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUseProgram")]
        public static
        void UseProgram(UInt32 program)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glUseProgram((UInt32)program);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Validates a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object to be validated.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glValidateProgram")]
        public static
        void ValidateProgram(Int32 program)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glValidateProgram((UInt32)program);
#if DEBUG
            }
#endif
        }



        /// <summary>
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffers in bufs.
        /// </para>
        /// </param>
        /// <param name="bufs">
        /// <para>
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDrawBuffers")]
        public static
        void DrawBuffers(Int32 n, OpenTK.Graphics.OpenGL.DrawBuffersEnum[] bufs)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (OpenTK.Graphics.OpenGL.DrawBuffersEnum* bufs_ptr = bufs)
                    {
                        Delegates.glDrawBuffers((Int32)n, (OpenTK.Graphics.OpenGL.DrawBuffersEnum*)bufs_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffers in bufs.
        /// </para>
        /// </param>
        /// <param name="bufs">
        /// <para>
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDrawBuffers")]
        public static
        void DrawBuffers(Int32 n, ref OpenTK.Graphics.OpenGL.DrawBuffersEnum bufs)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (OpenTK.Graphics.OpenGL.DrawBuffersEnum* bufs_ptr = &bufs)
                    {
                        Delegates.glDrawBuffers((Int32)n, (OpenTK.Graphics.OpenGL.DrawBuffersEnum*)bufs_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffers in bufs.
        /// </para>
        /// </param>
        /// <param name="bufs">
        /// <para>
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDrawBuffers")]
        public static
        unsafe void DrawBuffers(Int32 n, OpenTK.Graphics.OpenGL.DrawBuffersEnum* bufs)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDrawBuffers((Int32)n, (OpenTK.Graphics.OpenGL.DrawBuffersEnum*)bufs);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap">
        /// <para>
        /// Specifies a symbolic constant indicating a GL capability.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glEnablei")]
        public static
        void Enable(OpenTK.Graphics.OpenGL.IndexedEnableCap target, Int32 index)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glEnablei((OpenTK.Graphics.OpenGL.IndexedEnableCap)target, (UInt32)index);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap">
        /// <para>
        /// Specifies a symbolic constant indicating a GL capability.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glEnablei")]
        public static
        void Enable(OpenTK.Graphics.OpenGL.IndexedEnableCap target, UInt32 index)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glEnablei((OpenTK.Graphics.OpenGL.IndexedEnableCap)target, (UInt32)index);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Enable or disable a generic vertex attribute array
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be enabled or disabled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glEnableVertexAttribArray")]
        public static
        void EnableVertexAttribArray(Int32 index)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glEnableVertexAttribArray((UInt32)index);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Enable or disable a generic vertex attribute array
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be enabled or disabled.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glEnableVertexAttribArray")]
        public static
        void EnableVertexAttribArray(UInt32 index)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glEnableVertexAttribArray((UInt32)index);
#if DEBUG
            }
#endif
        }
        /// <summary>
        /// Validates a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object to be validated.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glValidateProgram")]
        public static
        void ValidateProgram(UInt32 program)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glValidateProgram((UInt32)program);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1d")]
        public static
        void VertexAttrib1(Int32 index, Double x)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib1d((UInt32)index, (Double)x);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1d")]
        public static
        void VertexAttrib1(UInt32 index, Double x)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib1d((UInt32)index, (Double)x);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1dv")]
        public static
        unsafe void VertexAttrib1(Int32 index, Double* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib1dv((UInt32)index, (Double*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1dv")]
        public static
        unsafe void VertexAttrib1(UInt32 index, Double* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib1dv((UInt32)index, (Double*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1f")]
        public static
        void VertexAttrib1(Int32 index, Single x)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib1f((UInt32)index, (Single)x);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1f")]
        public static
        void VertexAttrib1(UInt32 index, Single x)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib1f((UInt32)index, (Single)x);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        public static
        unsafe void VertexAttrib1(Int32 index, Single* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib1fv((UInt32)index, (Single*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        public static
        unsafe void VertexAttrib1(UInt32 index, Single* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib1fv((UInt32)index, (Single*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1s")]
        public static
        void VertexAttrib1(Int32 index, Int16 x)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib1s((UInt32)index, (Int16)x);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1s")]
        public static
        void VertexAttrib1(UInt32 index, Int16 x)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib1s((UInt32)index, (Int16)x);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1sv")]
        public static
        unsafe void VertexAttrib1(Int32 index, Int16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib1sv((UInt32)index, (Int16*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1sv")]
        public static
        unsafe void VertexAttrib1(UInt32 index, Int16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib1sv((UInt32)index, (Int16*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2d")]
        public static
        void VertexAttrib2(Int32 index, Double x, Double y)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib2d((UInt32)index, (Double)x, (Double)y);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2d")]
        public static
        void VertexAttrib2(UInt32 index, Double x, Double y)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib2d((UInt32)index, (Double)x, (Double)y);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static
        void VertexAttrib2(Int32 index, Double[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static
        void VertexAttrib2(Int32 index, ref Double v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static
        unsafe void VertexAttrib2(Int32 index, Double* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static
        void VertexAttrib2(UInt32 index, Double[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static
        void VertexAttrib2(UInt32 index, ref Double v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static
        unsafe void VertexAttrib2(UInt32 index, Double* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2f")]
        public static
        void VertexAttrib2(Int32 index, Single x, Single y)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib2f((UInt32)index, (Single)x, (Single)y);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2f")]
        public static
        void VertexAttrib2(UInt32 index, Single x, Single y)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib2f((UInt32)index, (Single)x, (Single)y);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static
        void VertexAttrib2(Int32 index, Single[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static
        void VertexAttrib2(Int32 index, ref Single v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static
        unsafe void VertexAttrib2(Int32 index, Single* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static
        void VertexAttrib2(UInt32 index, Single[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static
        void VertexAttrib2(UInt32 index, ref Single v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static
        unsafe void VertexAttrib2(UInt32 index, Single* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2s")]
        public static
        void VertexAttrib2(Int32 index, Int16 x, Int16 y)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib2s((UInt32)index, (Int16)x, (Int16)y);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2s")]
        public static
        void VertexAttrib2(UInt32 index, Int16 x, Int16 y)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib2s((UInt32)index, (Int16)x, (Int16)y);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static
        void VertexAttrib2(Int32 index, Int16[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static
        void VertexAttrib2(Int32 index, ref Int16 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static
        unsafe void VertexAttrib2(Int32 index, Int16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static
        void VertexAttrib2(UInt32 index, Int16[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static
        void VertexAttrib2(UInt32 index, ref Int16 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static
        unsafe void VertexAttrib2(UInt32 index, Int16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3d")]
        public static
        void VertexAttrib3(Int32 index, Double x, Double y, Double z)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib3d((UInt32)index, (Double)x, (Double)y, (Double)z);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3d")]
        public static
        void VertexAttrib3(UInt32 index, Double x, Double y, Double z)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib3d((UInt32)index, (Double)x, (Double)y, (Double)z);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static
        void VertexAttrib3(Int32 index, Double[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static
        void VertexAttrib3(Int32 index, ref Double v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static
        unsafe void VertexAttrib3(Int32 index, Double* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static
        void VertexAttrib3(UInt32 index, Double[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static
        void VertexAttrib3(UInt32 index, ref Double v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static
        unsafe void VertexAttrib3(UInt32 index, Double* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3f")]
        public static
        void VertexAttrib3(Int32 index, Single x, Single y, Single z)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib3f((UInt32)index, (Single)x, (Single)y, (Single)z);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3f")]
        public static
        void VertexAttrib3(UInt32 index, Single x, Single y, Single z)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib3f((UInt32)index, (Single)x, (Single)y, (Single)z);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static
        void VertexAttrib3(Int32 index, Single[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static
        void VertexAttrib3(Int32 index, ref Single v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }



        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static
        unsafe void VertexAttrib3(Int32 index, Single* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static
        void VertexAttrib3(UInt32 index, Single[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static
        void VertexAttrib3(UInt32 index, ref Single v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static
        unsafe void VertexAttrib3(UInt32 index, Single* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3s")]
        public static
        void VertexAttrib3(Int32 index, Int16 x, Int16 y, Int16 z)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib3s((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3s")]
        public static
        void VertexAttrib3(UInt32 index, Int16 x, Int16 y, Int16 z)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib3s((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static
        void VertexAttrib3(Int32 index, Int16[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static
        void VertexAttrib3(Int32 index, ref Int16 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static
        unsafe void VertexAttrib3(Int32 index, Int16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static
        void VertexAttrib3(UInt32 index, Int16[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static
        void VertexAttrib3(UInt32 index, ref Int16 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static
        unsafe void VertexAttrib3(UInt32 index, Int16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4bv")]
        public static
        void VertexAttrib4(UInt32 index, SByte[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4bv((UInt32)index, (SByte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4bv")]
        public static
        void VertexAttrib4(UInt32 index, ref SByte v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4bv((UInt32)index, (SByte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4bv")]
        public static
        unsafe void VertexAttrib4(UInt32 index, SByte* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4bv((UInt32)index, (SByte*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4d")]
        public static
        void VertexAttrib4(Int32 index, Double x, Double y, Double z, Double w)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4d((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4d")]
        public static
        void VertexAttrib4(UInt32 index, Double x, Double y, Double z, Double w)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4d((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static
        void VertexAttrib4(Int32 index, Double[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static
        void VertexAttrib4(Int32 index, ref Double v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static
        unsafe void VertexAttrib4(Int32 index, Double* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static
        void VertexAttrib4(UInt32 index, Double[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static
        void VertexAttrib4(UInt32 index, ref Double v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static
        unsafe void VertexAttrib4(UInt32 index, Double* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4f")]
        public static
        void VertexAttrib4(Int32 index, Single x, Single y, Single z, Single w)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4f((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4f")]
        public static
        void VertexAttrib4(UInt32 index, Single x, Single y, Single z, Single w)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4f((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static
        void VertexAttrib4(Int32 index, Single[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static
        void VertexAttrib4(Int32 index, ref Single v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static
        unsafe void VertexAttrib4(Int32 index, Single* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static
        void VertexAttrib4(UInt32 index, Single[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static
        void VertexAttrib4(UInt32 index, ref Single v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static
        unsafe void VertexAttrib4(UInt32 index, Single* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static
        void VertexAttrib4(Int32 index, Int32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static
        void VertexAttrib4(Int32 index, ref Int32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static
        unsafe void VertexAttrib4(Int32 index, Int32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static
        void VertexAttrib4(UInt32 index, Int32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static
        void VertexAttrib4(UInt32 index, ref Int32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static
        unsafe void VertexAttrib4(UInt32 index, Int32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nbv")]
        public static
        void VertexAttrib4N(UInt32 index, SByte[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4Nbv((UInt32)index, (SByte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nbv")]
        public static
        void VertexAttrib4N(UInt32 index, ref SByte v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4Nbv((UInt32)index, (SByte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nbv")]
        public static
        unsafe void VertexAttrib4N(UInt32 index, SByte* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4Nbv((UInt32)index, (SByte*)v);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static
        void VertexAttrib4N(Int32 index, Int32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static
        void VertexAttrib4N(Int32 index, ref Int32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static
        unsafe void VertexAttrib4N(Int32 index, Int32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static
        void VertexAttrib4N(UInt32 index, Int32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static
        void VertexAttrib4N(UInt32 index, ref Int32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static
        unsafe void VertexAttrib4N(UInt32 index, Int32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static
        void VertexAttrib4N(Int32 index, Int16[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static
        void VertexAttrib4N(Int32 index, ref Int16 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static
        unsafe void VertexAttrib4N(Int32 index, Int16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static
        void VertexAttrib4N(UInt32 index, Int16[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static
        void VertexAttrib4N(UInt32 index, ref Int16 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static
        unsafe void VertexAttrib4N(UInt32 index, Int16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nub")]
        public static
        void VertexAttrib4N(Int32 index, Byte x, Byte y, Byte z, Byte w)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4Nub((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nub")]
        public static
        void VertexAttrib4N(UInt32 index, Byte x, Byte y, Byte z, Byte w)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4Nub((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static
        void VertexAttrib4N(Int32 index, Byte[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static
        void VertexAttrib4N(Int32 index, ref Byte v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static
        unsafe void VertexAttrib4N(Int32 index, Byte* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static
        void VertexAttrib4N(UInt32 index, Byte[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static
        void VertexAttrib4N(UInt32 index, ref Byte v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static
        unsafe void VertexAttrib4N(UInt32 index, Byte* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nuiv")]
        public static
        void VertexAttrib4N(UInt32 index, UInt32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nuiv")]
        public static
        void VertexAttrib4N(UInt32 index, ref UInt32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nuiv")]
        public static
        unsafe void VertexAttrib4N(UInt32 index, UInt32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nusv")]
        public static
        void VertexAttrib4N(UInt32 index, UInt16[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nusv")]
        public static
        void VertexAttrib4N(UInt32 index, ref UInt16 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nusv")]
        public static
        unsafe void VertexAttrib4N(UInt32 index, UInt16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4s")]
        public static
        void VertexAttrib4(Int32 index, Int16 x, Int16 y, Int16 z, Int16 w)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4s((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4s")]
        public static
        void VertexAttrib4(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4s((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static
        void VertexAttrib4(Int32 index, Int16[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static
        void VertexAttrib4(Int32 index, ref Int16 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static
        unsafe void VertexAttrib4(Int32 index, Int16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static
        void VertexAttrib4(UInt32 index, Int16[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static
        void VertexAttrib4(UInt32 index, ref Int16 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static
        unsafe void VertexAttrib4(UInt32 index, Int16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static
        void VertexAttrib4(Int32 index, Byte[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static
        void VertexAttrib4(Int32 index, ref Byte v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static
        unsafe void VertexAttrib4(Int32 index, Byte* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static
        void VertexAttrib4(UInt32 index, Byte[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }



        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        public static
        void TransformFeedbackVaryings(UInt32 program, Int32 count, String[] varyings, OpenTK.Graphics.OpenGL.TransformFeedbackMode bufferMode)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glTransformFeedbackVaryings((UInt32)program, (Int32)count, (String[])varyings, (OpenTK.Graphics.OpenGL.TransformFeedbackMode)bufferMode);
#if DEBUG
            }
#endif
        }




        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static
        void VertexAttrib4(UInt32 index, ref Byte v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static
        unsafe void VertexAttrib4(UInt32 index, Byte* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4uiv")]
        public static
        void VertexAttrib4(UInt32 index, UInt32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4uiv((UInt32)index, (UInt32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4uiv")]
        public static
        void VertexAttrib4(UInt32 index, ref UInt32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4uiv((UInt32)index, (UInt32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4uiv")]
        public static
        unsafe void VertexAttrib4(UInt32 index, UInt32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4uiv((UInt32)index, (UInt32*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4usv")]
        public static
        void VertexAttrib4(UInt32 index, UInt16[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4usv((UInt32)index, (UInt16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4usv")]
        public static
        void VertexAttrib4(UInt32 index, ref UInt16 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4usv((UInt32)index, (UInt16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4usv")]
        public static
        unsafe void VertexAttrib4(UInt32 index, UInt16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttrib4usv((UInt32)index, (UInt16*)v);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI1i")]
        public static
        void VertexAttribI1(Int32 index, Int32 x)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI1i((UInt32)index, (Int32)x);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI1i")]
        public static
        void VertexAttribI1(UInt32 index, Int32 x)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI1i((UInt32)index, (Int32)x);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI1iv")]
        public static
        unsafe void VertexAttribI1(Int32 index, Int32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI1iv((UInt32)index, (Int32*)v);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI1iv")]
        public static
        unsafe void VertexAttribI1(UInt32 index, Int32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI1iv((UInt32)index, (Int32*)v);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI1ui")]
        public static
        void VertexAttribI1(UInt32 index, UInt32 x)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI1ui((UInt32)index, (UInt32)x);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI1uiv")]
        public static
        unsafe void VertexAttribI1(UInt32 index, UInt32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI1uiv((UInt32)index, (UInt32*)v);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2i")]
        public static
        void VertexAttribI2(Int32 index, Int32 x, Int32 y)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI2i((UInt32)index, (Int32)x, (Int32)y);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2i")]
        public static
        void VertexAttribI2(UInt32 index, Int32 x, Int32 y)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI2i((UInt32)index, (Int32)x, (Int32)y);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static
        void VertexAttribI2(Int32 index, Int32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static
        void VertexAttribI2(Int32 index, ref Int32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static
        unsafe void VertexAttribI2(Int32 index, Int32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static
        void VertexAttribI2(UInt32 index, Int32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static
        void VertexAttribI2(UInt32 index, ref Int32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static
        unsafe void VertexAttribI2(UInt32 index, Int32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2ui")]
        public static
        void VertexAttribI2(UInt32 index, UInt32 x, UInt32 y)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI2ui((UInt32)index, (UInt32)x, (UInt32)y);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
        public static
        void VertexAttribI2(UInt32 index, UInt32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI2uiv((UInt32)index, (UInt32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
        public static
        void VertexAttribI2(UInt32 index, ref UInt32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI2uiv((UInt32)index, (UInt32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
        public static
        unsafe void VertexAttribI2(UInt32 index, UInt32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI2uiv((UInt32)index, (UInt32*)v);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3i")]
        public static
        void VertexAttribI3(Int32 index, Int32 x, Int32 y, Int32 z)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI3i((UInt32)index, (Int32)x, (Int32)y, (Int32)z);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3i")]
        public static
        void VertexAttribI3(UInt32 index, Int32 x, Int32 y, Int32 z)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI3i((UInt32)index, (Int32)x, (Int32)y, (Int32)z);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static
        void VertexAttribI3(Int32 index, Int32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static
        void VertexAttribI3(Int32 index, ref Int32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static
        unsafe void VertexAttribI3(Int32 index, Int32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static
        void VertexAttribI3(UInt32 index, Int32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static
        void VertexAttribI3(UInt32 index, ref Int32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static
        unsafe void VertexAttribI3(UInt32 index, Int32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3ui")]
        public static
        void VertexAttribI3(UInt32 index, UInt32 x, UInt32 y, UInt32 z)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI3ui((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
        public static
        void VertexAttribI3(UInt32 index, UInt32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI3uiv((UInt32)index, (UInt32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
        public static
        void VertexAttribI3(UInt32 index, ref UInt32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI3uiv((UInt32)index, (UInt32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
        public static
        unsafe void VertexAttribI3(UInt32 index, UInt32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI3uiv((UInt32)index, (UInt32*)v);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
        public static
        void VertexAttribI4(UInt32 index, SByte[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4bv((UInt32)index, (SByte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
        public static
        void VertexAttribI4(UInt32 index, ref SByte v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4bv((UInt32)index, (SByte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
        public static
        unsafe void VertexAttribI4(UInt32 index, SByte* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI4bv((UInt32)index, (SByte*)v);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4i")]
        public static
        void VertexAttribI4(Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI4i((UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4i")]
        public static
        void VertexAttribI4(UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI4i((UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static
        void VertexAttribI4(Int32 index, Int32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static
        void VertexAttribI4(Int32 index, ref Int32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static
        unsafe void VertexAttribI4(Int32 index, Int32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static
        void VertexAttribI4(UInt32 index, Int32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static
        void VertexAttribI4(UInt32 index, ref Int32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static
        unsafe void VertexAttribI4(UInt32 index, Int32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static
        void VertexAttribI4(Int32 index, Int16[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static
        void VertexAttribI4(Int32 index, ref Int16 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static
        unsafe void VertexAttribI4(Int32 index, Int16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static
        void VertexAttribI4(UInt32 index, Int16[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static
        void VertexAttribI4(UInt32 index, ref Int16 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static
        unsafe void VertexAttribI4(UInt32 index, Int16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static
        void VertexAttribI4(Int32 index, Byte[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static
        void VertexAttribI4(Int32 index, ref Byte v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static
        unsafe void VertexAttribI4(Int32 index, Byte* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static
        void VertexAttribI4(UInt32 index, Byte[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static
        void VertexAttribI4(UInt32 index, ref Byte v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static
        unsafe void VertexAttribI4(UInt32 index, Byte* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4ui")]
        public static
        void VertexAttribI4(UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI4ui((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
#if DEBUG
            }
#endif
        }


        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        public static
        void TransformFeedbackVaryings(Int32 program, Int32 count, String[] varyings, OpenTK.Graphics.OpenGL.TransformFeedbackMode bufferMode)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glTransformFeedbackVaryings((UInt32)program, (Int32)count, (String[])varyings, (OpenTK.Graphics.OpenGL.TransformFeedbackMode)bufferMode);
#if DEBUG
            }
#endif
        }


        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        public static
        void VertexAttribI4(UInt32 index, UInt32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4uiv((UInt32)index, (UInt32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        public static
        void VertexAttribI4(UInt32 index, ref UInt32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4uiv((UInt32)index, (UInt32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        public static
        unsafe void VertexAttribI4(UInt32 index, UInt32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI4uiv((UInt32)index, (UInt32*)v);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
        public static
        void VertexAttribI4(UInt32 index, UInt16[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt16* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4usv((UInt32)index, (UInt16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
        public static
        void VertexAttribI4(UInt32 index, ref UInt16 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4usv((UInt32)index, (UInt16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
        public static
        unsafe void VertexAttribI4(UInt32 index, UInt16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribI4usv((UInt32)index, (UInt16*)v);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribIPointerType type, Int32 stride, IntPtr pointer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
            where T4 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
            where T4 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[, ,] pointer)
            where T4 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
            where T4 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T4)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribIPointerType type, Int32 stride, IntPtr pointer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
            where T4 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
            where T4 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[, ,] pointer)
            where T4 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static
        void VertexAttribIPointer<T4>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
            where T4 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T4)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, IntPtr pointer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
            where T5 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
            where T5 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[, ,] pointer)
            where T5 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
            where T5 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T5)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, IntPtr pointer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
            where T5 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
            where T5 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[, ,] pointer)
            where T5 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static
        void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.OpenGL.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
            where T5 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.OpenGL.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T5)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }
        /// <summary>
        /// Compiles a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be compiled.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glCompileShader")]
        public static
        void CompileShader(UInt32 shader)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glCompileShader((UInt32)shader);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Compiles a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be compiled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glCompileShader")]
        public static
        void CompileShader(Int32 shader)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glCompileShader((UInt32)shader);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
        public static
        void GetIntegerIndexed(OpenTK.Graphics.OpenGL.ExtDrawBuffers2 target, Int32 index, [OutAttribute] Int32[] data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.OpenGL.ExtDrawBuffers2)target, (UInt32)index, (Int32*)data_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
        public static
        void GetIntegerIndexed(OpenTK.Graphics.OpenGL.ExtDrawBuffers2 target, Int32 index, [OutAttribute] out Int32 data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.OpenGL.ExtDrawBuffers2)target, (UInt32)index, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
        public static
        unsafe void GetIntegerIndexed(OpenTK.Graphics.OpenGL.ExtDrawBuffers2 target, Int32 index, [OutAttribute] Int32* data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.OpenGL.ExtDrawBuffers2)target, (UInt32)index, (Int32*)data);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
        public static
        void GetIntegerIndexed(OpenTK.Graphics.OpenGL.ExtDrawBuffers2 target, UInt32 index, [OutAttribute] Int32[] data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.OpenGL.ExtDrawBuffers2)target, (UInt32)index, (Int32*)data_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
        public static
        void GetIntegerIndexed(OpenTK.Graphics.OpenGL.ExtDrawBuffers2 target, UInt32 index, [OutAttribute] out Int32 data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.OpenGL.ExtDrawBuffers2)target, (UInt32)index, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
        public static
        unsafe void GetIntegerIndexed(OpenTK.Graphics.OpenGL.ExtDrawBuffers2 target, UInt32 index, [OutAttribute] Int32* data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.OpenGL.ExtDrawBuffers2)target, (UInt32)index, (Int32*)data);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static
        void DeleteFramebuffers(Int32 n, Int32[] framebuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* framebuffers_ptr = framebuffers)
                    {
                        Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static
        void DeleteFramebuffers(Int32 n, ref Int32 framebuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* framebuffers_ptr = &framebuffers)
                    {
                        Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static
        unsafe void DeleteFramebuffers(Int32 n, Int32* framebuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static
        void DeleteFramebuffers(Int32 n, UInt32[] framebuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* framebuffers_ptr = framebuffers)
                    {
                        Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static
        void DeleteFramebuffers(Int32 n, ref UInt32 framebuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* framebuffers_ptr = &framebuffers)
                    {
                        Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static
        unsafe void DeleteFramebuffers(Int32 n, UInt32* framebuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Deletes a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDeleteProgram")]
        public static
        void DeleteProgram(Int32 program)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDeleteProgram((UInt32)program);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Deletes a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDeleteProgram")]
        public static
        void DeleteProgram(UInt32 program)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDeleteProgram((UInt32)program);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static
        void DeleteRenderbuffers(Int32 n, Int32[] renderbuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* renderbuffers_ptr = renderbuffers)
                    {
                        Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static
        void DeleteRenderbuffers(Int32 n, ref Int32 renderbuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* renderbuffers_ptr = &renderbuffers)
                    {
                        Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static
        unsafe void DeleteRenderbuffers(Int32 n, Int32* renderbuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static
        void DeleteRenderbuffers(Int32 n, UInt32[] renderbuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* renderbuffers_ptr = renderbuffers)
                    {
                        Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static
        void DeleteRenderbuffers(Int32 n, ref UInt32 renderbuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* renderbuffers_ptr = &renderbuffers)
                    {
                        Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static
        unsafe void DeleteRenderbuffers(Int32 n, UInt32* renderbuffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Deletes a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDeleteShader")]
        public static
        void DeleteShader(Int32 shader)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDeleteShader((UInt32)shader);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Deletes a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDeleteShader")]
        public static
        void DeleteShader(UInt32 shader)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDeleteShader((UInt32)shader);
#if DEBUG
            }
#endif
        }

    }
}
#endif