#region License
//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2009 the Open Toolkit library.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//
#endregion

#if  ENABLE_DESKTOP_OPENGL
namespace OpenTK.Graphics.OpenGL
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;
#pragma warning disable 3019
#pragma warning disable 1591
#pragma warning disable 1572
#pragma warning disable 1573

    partial class GL
    {
        //================

        [AutoGenerated(Category = "ArbTextureMultisample", Version = "1.2", EntryPoint = "glSampleMaski")]
        public static
        void SampleMask(Int32 index, Int32 mask)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glSampleMaski((UInt32)index, (UInt32)mask);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbTextureMultisample", Version = "1.2", EntryPoint = "glSampleMaski")]
        public static
        void SampleMask(UInt32 index, UInt32 mask)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glSampleMaski((UInt32)index, (UInt32)mask);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Multiply the current matrix by a general scaling matrix
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify scale factors along the x, y, and z axes, respectively.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version10Deprecated", Version = "1.0", EntryPoint = "glScaled")]
        public static
        void Scale(Double x, Double y, Double z)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glScaled((Double)x, (Double)y, (Double)z);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Multiply the current matrix by a general scaling matrix
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify scale factors along the x, y, and z axes, respectively.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version10Deprecated", Version = "1.0", EntryPoint = "glScalef")]
        public static
        void Scale(Single x, Single y, Single z)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glScalef((Single)x, (Single)y, (Single)z);
#if DEBUG
            }
#endif
        }


        [AutoGenerated(Category = "ArbSync", Version = "1.2", EntryPoint = "glDeleteSync")]
        public static
        void DeleteSync(IntPtr sync)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDeleteSync((IntPtr)sync);
#if DEBUG
            }
#endif
        }

        /// <summary>
        /// Set the blend color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// specify the components of GL_BLEND_COLOR
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glBlendColor")]
        public static
        void BlendColor(Single red, Single green, Single blue, Single alpha)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBlendColor((Single)red, (Single)green, (Single)blue, (Single)alpha);
#if DEBUG
            }
#endif
        }
        [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glWriteMaskEXT")]
        public static
        void WriteMask(Int32 res, Int32 @in, OpenTK.Graphics.OpenGL.ExtVertexShader outX, OpenTK.Graphics.OpenGL.ExtVertexShader outY, OpenTK.Graphics.OpenGL.ExtVertexShader outZ, OpenTK.Graphics.OpenGL.ExtVertexShader outW)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glWriteMaskEXT((UInt32)res, (UInt32)@in, (OpenTK.Graphics.OpenGL.ExtVertexShader)outX, (OpenTK.Graphics.OpenGL.ExtVertexShader)outY, (OpenTK.Graphics.OpenGL.ExtVertexShader)outZ, (OpenTK.Graphics.OpenGL.ExtVertexShader)outW);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glWriteMaskEXT")]
        public static
        void WriteMask(UInt32 res, UInt32 @in, OpenTK.Graphics.OpenGL.ExtVertexShader outX, OpenTK.Graphics.OpenGL.ExtVertexShader outY, OpenTK.Graphics.OpenGL.ExtVertexShader outZ, OpenTK.Graphics.OpenGL.ExtVertexShader outW)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glWriteMaskEXT((UInt32)res, (UInt32)@in, (OpenTK.Graphics.OpenGL.ExtVertexShader)outX, (OpenTK.Graphics.OpenGL.ExtVertexShader)outY, (OpenTK.Graphics.OpenGL.ExtVertexShader)outZ, (OpenTK.Graphics.OpenGL.ExtVertexShader)outW);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// The starting index of the portion of the color table to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The number of table entries to replace.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glColorSubTable")]
        public static
        void ColorSubTable(OpenTK.Graphics.OpenGL.ColorTableTarget target, Int32 start, Int32 count, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, IntPtr data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glColorSubTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// The starting index of the portion of the color table to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The number of table entries to replace.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glColorSubTable")]
        public static
        void ColorSubTable<T5>(OpenTK.Graphics.OpenGL.ColorTableTarget target, Int32 start, Int32 count, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[] data)
            where T5 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorSubTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// The starting index of the portion of the color table to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The number of table entries to replace.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glColorSubTable")]
        public static
        void ColorSubTable<T5>(OpenTK.Graphics.OpenGL.ColorTableTarget target, Int32 start, Int32 count, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[,] data)
            where T5 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorSubTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// The starting index of the portion of the color table to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The number of table entries to replace.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glColorSubTable")]
        public static
        void ColorSubTable<T5>(OpenTK.Graphics.OpenGL.ColorTableTarget target, Int32 start, Int32 count, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] T5[,,] data)
            where T5 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorSubTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// The starting index of the portion of the color table to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The number of table entries to replace.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12Deprecated", Version = "1.2", EntryPoint = "glColorSubTable")]
        public static
        void ColorSubTable<T5>(OpenTK.Graphics.OpenGL.ColorTableTarget target, Int32 start, Int32 count, OpenTK.Graphics.OpenGL.PixelFormat format, OpenTK.Graphics.OpenGL.PixelType type, [InAttribute, OutAttribute] ref T5 data)
            where T5 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorSubTable((OpenTK.Graphics.OpenGL.ColorTableTarget)target, (Int32)start, (Int32)count, (OpenTK.Graphics.OpenGL.PixelFormat)format, (OpenTK.Graphics.OpenGL.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T5)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }

        partial class Ext
        {
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantivEXT")]
            public static
            unsafe void Variant(Int32 id, Int32* addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glVariantivEXT((UInt32)id, (Int32*)addr);
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantivEXT")]
            public static
            void Variant(UInt32 id, Int32[] addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Int32* addr_ptr = addr)
                        {
                            Delegates.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantivEXT")]
            public static
            void Variant(UInt32 id, ref Int32 addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Int32* addr_ptr = &addr)
                        {
                            Delegates.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantivEXT")]
            public static
            unsafe void Variant(UInt32 id, Int32* addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glVariantivEXT((UInt32)id, (Int32*)addr);
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader type, Int32 stride, IntPtr addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr);
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader type, Int32 stride, [InAttribute, OutAttribute] T3[] addr)
                where T3 : struct
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader type, Int32 stride, [InAttribute, OutAttribute] T3[,] addr)
                where T3 : struct
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader type, Int32 stride, [InAttribute, OutAttribute] T3[,,] addr)
                where T3 : struct
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader type, Int32 stride, [InAttribute, OutAttribute] ref T3 addr)
                where T3 : struct
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                        addr = (T3)addr_ptr.Target;
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader type, UInt32 stride, IntPtr addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr);
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader type, UInt32 stride, [InAttribute, OutAttribute] T3[] addr)
                where T3 : struct
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader type, UInt32 stride, [InAttribute, OutAttribute] T3[,] addr)
                where T3 : struct
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader type, UInt32 stride, [InAttribute, OutAttribute] T3[,,] addr)
                where T3 : struct
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static
            void VariantPointer<T3>(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader type, UInt32 stride, [InAttribute, OutAttribute] ref T3 addr)
                where T3 : struct
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                        addr = (T3)addr_ptr.Target;
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantsvEXT")]
            public static
            void Variant(Int32 id, Int16[] addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Int16* addr_ptr = addr)
                        {
                            Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantsvEXT")]
            public static
            void Variant(Int32 id, ref Int16 addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Int16* addr_ptr = &addr)
                        {
                            Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantsvEXT")]
            public static
            unsafe void Variant(Int32 id, Int16* addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr);
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantsvEXT")]
            public static
            void Variant(UInt32 id, Int16[] addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Int16* addr_ptr = addr)
                        {
                            Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantsvEXT")]
            public static
            void Variant(UInt32 id, ref Int16 addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Int16* addr_ptr = &addr)
                        {
                            Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantsvEXT")]
            public static
            unsafe void Variant(UInt32 id, Int16* addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr);
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantubvEXT")]
            public static
            void Variant(Int32 id, Byte[] addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Byte* addr_ptr = addr)
                        {
                            Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantubvEXT")]
            public static
            void Variant(Int32 id, ref Byte addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Byte* addr_ptr = &addr)
                        {
                            Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantubvEXT")]
            public static
            unsafe void Variant(Int32 id, Byte* addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr);
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantubvEXT")]
            public static
            void Variant(UInt32 id, Byte[] addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Byte* addr_ptr = addr)
                        {
                            Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantubvEXT")]
            public static
            void Variant(UInt32 id, ref Byte addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Byte* addr_ptr = &addr)
                        {
                            Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantubvEXT")]
            public static
            unsafe void Variant(UInt32 id, Byte* addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr);
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantuivEXT")]
            public static
            void Variant(UInt32 id, UInt32[] addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (UInt32* addr_ptr = addr)
                        {
                            Delegates.glVariantuivEXT((UInt32)id, (UInt32*)addr_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantuivEXT")]
            public static
            void Variant(UInt32 id, ref UInt32 addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (UInt32* addr_ptr = &addr)
                        {
                            Delegates.glVariantuivEXT((UInt32)id, (UInt32*)addr_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantuivEXT")]
            public static
            unsafe void Variant(UInt32 id, UInt32* addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glVariantuivEXT((UInt32)id, (UInt32*)addr);
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantusvEXT")]
            public static
            void Variant(UInt32 id, UInt16[] addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (UInt16* addr_ptr = addr)
                        {
                            Delegates.glVariantusvEXT((UInt32)id, (UInt16*)addr_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantusvEXT")]
            public static
            void Variant(UInt32 id, ref UInt16 addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (UInt16* addr_ptr = &addr)
                        {
                            Delegates.glVariantusvEXT((UInt32)id, (UInt16*)addr_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantusvEXT")]
            public static
            unsafe void Variant(UInt32 id, UInt16* addr)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glVariantusvEXT((UInt32)id, (UInt16*)addr);
#if DEBUG
                }
#endif
            }






            /// <summary>
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// specifies how source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glBlendEquation")]
            public static
            void BlendEquation(OpenTK.Graphics.OpenGL.BlendEquationMode mode)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glBlendEquation((OpenTK.Graphics.OpenGL.BlendEquationMode)mode);
#if DEBUG
                }
#endif
            }


            /// <summary>
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// specifies how source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ArbDrawBuffersBlend", Version = "1.2", EntryPoint = "glBlendEquationi")]
            public static
            void BlendEquation(Int32 buf, OpenTK.Graphics.OpenGL.ArbDrawBuffersBlend mode)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glBlendEquationi((UInt32)buf, (OpenTK.Graphics.OpenGL.ArbDrawBuffersBlend)mode);
#if DEBUG
                }
#endif
            }


            /// <summary>
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// specifies how source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbDrawBuffersBlend", Version = "1.2", EntryPoint = "glBlendEquationi")]
            public static
            void BlendEquation(UInt32 buf, OpenTK.Graphics.OpenGL.ArbDrawBuffersBlend mode)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glBlendEquationi((UInt32)buf, (OpenTK.Graphics.OpenGL.ArbDrawBuffersBlend)mode);
#if DEBUG
                }
#endif
            }




            /// <summary>
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="modeRGB">
            /// <para>
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
            /// </para>
            /// </param>
            /// <param name="modeAlpha">
            /// <para>
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
            /// </para>
            /// </param>
            [AutoGenerated(Category = "ArbDrawBuffersBlend", Version = "1.2", EntryPoint = "glBlendEquationSeparatei")]
            public static
            void BlendEquationSeparate(Int32 buf, OpenTK.Graphics.OpenGL.BlendEquationMode modeRGB, OpenTK.Graphics.OpenGL.BlendEquationMode modeAlpha)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glBlendEquationSeparatei((UInt32)buf, (OpenTK.Graphics.OpenGL.BlendEquationMode)modeRGB, (OpenTK.Graphics.OpenGL.BlendEquationMode)modeAlpha);
#if DEBUG
                }
#endif
            }


            /// <summary>
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="modeRGB">
            /// <para>
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
            /// </para>
            /// </param>
            /// <param name="modeAlpha">
            /// <para>
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
            /// </para>
            /// </param>
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbDrawBuffersBlend", Version = "1.2", EntryPoint = "glBlendEquationSeparatei")]
            public static
            void BlendEquationSeparate(UInt32 buf, OpenTK.Graphics.OpenGL.BlendEquationMode modeRGB, OpenTK.Graphics.OpenGL.BlendEquationMode modeAlpha)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glBlendEquationSeparatei((UInt32)buf, (OpenTK.Graphics.OpenGL.BlendEquationMode)modeRGB, (OpenTK.Graphics.OpenGL.BlendEquationMode)modeAlpha);
#if DEBUG
                }
#endif
            }



            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static
            void GetInvariantBoolean(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] out bool data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (bool* data_ptr = &data)
                        {
                            Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (bool*)data_ptr);
                            data = *data_ptr;
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static
            unsafe void GetInvariantBoolean(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] bool* data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (bool*)data);
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static
            void GetInvariantBoolean(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] bool[] data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (bool* data_ptr = data)
                        {
                            Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (bool*)data_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static
            void GetInvariantBoolean(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] out bool data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (bool* data_ptr = &data)
                        {
                            Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (bool*)data_ptr);
                            data = *data_ptr;
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static
            unsafe void GetInvariantBoolean(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] bool* data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (bool*)data);
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static
            void GetInvariantFloat(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] Single[] data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Single* data_ptr = data)
                        {
                            Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Single*)data_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static
            void GetInvariantFloat(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] out Single data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Single* data_ptr = &data)
                        {
                            Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Single*)data_ptr);
                            data = *data_ptr;
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static
            unsafe void GetInvariantFloat(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] Single* data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Single*)data);
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static
            void GetInvariantFloat(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] Single[] data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Single* data_ptr = data)
                        {
                            Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Single*)data_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static
            void GetInvariantFloat(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] out Single data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Single* data_ptr = &data)
                        {
                            Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Single*)data_ptr);
                            data = *data_ptr;
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static
            unsafe void GetInvariantFloat(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] Single* data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Single*)data);
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static
            void GetInvariantInteger(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] Int32[] data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Int32* data_ptr = data)
                        {
                            Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Int32*)data_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static
            void GetInvariantInteger(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] out Int32 data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Int32* data_ptr = &data)
                        {
                            Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Int32*)data_ptr);
                            data = *data_ptr;
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static
            unsafe void GetInvariantInteger(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] Int32* data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Int32*)data);
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static
            void GetInvariantInteger(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] Int32[] data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Int32* data_ptr = data)
                        {
                            Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Int32*)data_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static
            void GetInvariantInteger(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] out Int32 data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Int32* data_ptr = &data)
                        {
                            Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Int32*)data_ptr);
                            data = *data_ptr;
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static
            unsafe void GetInvariantInteger(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] Int32* data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Int32*)data);
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static
            void GetLocalConstantBoolean(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] bool[] data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (bool* data_ptr = data)
                        {
                            Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (bool*)data_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static
            void GetLocalConstantBoolean(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] out bool data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (bool* data_ptr = &data)
                        {
                            Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (bool*)data_ptr);
                            data = *data_ptr;
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static
            unsafe void GetLocalConstantBoolean(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] bool* data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (bool*)data);
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static
            void GetLocalConstantBoolean(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] bool[] data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (bool* data_ptr = data)
                        {
                            Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (bool*)data_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static
            void GetLocalConstantBoolean(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] out bool data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (bool* data_ptr = &data)
                        {
                            Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (bool*)data_ptr);
                            data = *data_ptr;
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static
            unsafe void GetLocalConstantBoolean(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] bool* data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (bool*)data);
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static
            void GetLocalConstantFloat(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] Single[] data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Single* data_ptr = data)
                        {
                            Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Single*)data_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static
            void GetLocalConstantFloat(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] out Single data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Single* data_ptr = &data)
                        {
                            Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Single*)data_ptr);
                            data = *data_ptr;
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static
            unsafe void GetLocalConstantFloat(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] Single* data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Single*)data);
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static
            void GetLocalConstantFloat(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] Single[] data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Single* data_ptr = data)
                        {
                            Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Single*)data_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static
            void GetLocalConstantFloat(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] out Single data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Single* data_ptr = &data)
                        {
                            Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Single*)data_ptr);
                            data = *data_ptr;
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static
            unsafe void GetLocalConstantFloat(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] Single* data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Single*)data);
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static
            void GetLocalConstantInteger(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] Int32[] data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Int32* data_ptr = data)
                        {
                            Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Int32*)data_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static
            void GetLocalConstantInteger(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] out Int32 data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Int32* data_ptr = &data)
                        {
                            Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Int32*)data_ptr);
                            data = *data_ptr;
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static
            unsafe void GetLocalConstantInteger(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] Int32* data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Int32*)data);
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static
            void GetLocalConstantInteger(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] Int32[] data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Int32* data_ptr = data)
                        {
                            Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Int32*)data_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static
            void GetLocalConstantInteger(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] out Int32 data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Int32* data_ptr = &data)
                        {
                            Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Int32*)data_ptr);
                            data = *data_ptr;
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static
            unsafe void GetLocalConstantInteger(UInt32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] Int32* data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (Int32*)data);
#if DEBUG
                }
#endif
            }



            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static
            void GetInvariantBoolean(Int32 id, OpenTK.Graphics.OpenGL.ExtVertexShader value, [OutAttribute] bool[] data)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (bool* data_ptr = data)
                        {
                            Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtVertexShader)value, (bool*)data_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }
        }
    }
}
#endif