#region License
//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2009 the Open Toolkit library.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//
#endregion

#if ENABLE_DESKTOP_OPENGL && gl1_3
namespace OpenTK.Graphics.OpenGL
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;
#pragma warning disable 3019
#pragma warning disable 1591
#pragma warning disable 1572
#pragma warning disable 1573

    partial class GL
    {

        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glEndQuery")]
        public static
        void EndQuery(OpenTK.Graphics.OpenGL.QueryTarget target)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glEndQuery((OpenTK.Graphics.OpenGL.QueryTarget)target);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Determine if a name corresponds to a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies a value that may be the name of a query object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glIsQuery")]
        public static
        bool IsQuery(Int32 id)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glIsQuery((UInt32)id);
#if DEBUG
            }
#endif
        }

        /// <summary>
        /// Map a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object being mapped. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="access">
        /// <para>
        /// Specifies the access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be GL_READ_ONLY, GL_WRITE_ONLY, or GL_READ_WRITE.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glMapBuffer")]
        public static
        unsafe System.IntPtr MapBuffer(OpenTK.Graphics.OpenGL.BufferTarget target, OpenTK.Graphics.OpenGL.BufferAccess access)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glMapBuffer((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferAccess)access);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Determine if a name corresponds to a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies a value that may be the name of a query object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glIsQuery")]
        public static
        bool IsQuery(UInt32 id)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glIsQuery((UInt32)id);
#if DEBUG
            }
#endif
        }

       
        /// <summary>
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static
        void GenBuffers(Int32 n, [OutAttribute] Int32[] buffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* buffers_ptr = buffers)
                    {
                        Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static
        void GenBuffers(Int32 n, [OutAttribute] out Int32 buffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* buffers_ptr = &buffers)
                    {
                        Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                        buffers = *buffers_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static
        unsafe void GenBuffers(Int32 n, [OutAttribute] Int32* buffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGenBuffers((Int32)n, (UInt32*)buffers);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static
        void GenBuffers(Int32 n, [OutAttribute] UInt32[] buffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* buffers_ptr = buffers)
                    {
                        Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static
        void GenBuffers(Int32 n, [OutAttribute] out UInt32 buffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* buffers_ptr = &buffers)
                    {
                        Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                        buffers = *buffers_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static
        unsafe void GenBuffers(Int32 n, [OutAttribute] UInt32* buffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGenBuffers((Int32)n, (UInt32*)buffers);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenQueries")]
        public static
        void GenQueries(Int32 n, [OutAttribute] Int32[] ids)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* ids_ptr = ids)
                    {
                        Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenQueries")]
        public static
        void GenQueries(Int32 n, [OutAttribute] out Int32 ids)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* ids_ptr = &ids)
                    {
                        Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
                        ids = *ids_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenQueries")]
        public static
        unsafe void GenQueries(Int32 n, [OutAttribute] Int32* ids)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGenQueries((Int32)n, (UInt32*)ids);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenQueries")]
        public static
        void GenQueries(Int32 n, [OutAttribute] UInt32[] ids)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* ids_ptr = ids)
                    {
                        Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenQueries")]
        public static
        void GenQueries(Int32 n, [OutAttribute] out UInt32 ids)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* ids_ptr = &ids)
                    {
                        Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
                        ids = *ids_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenQueries")]
        public static
        unsafe void GenQueries(Int32 n, [OutAttribute] UInt32* ids)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGenQueries((Int32)n, (UInt32*)ids);
#if DEBUG
            }
#endif
        }




        /// <summary>
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        public static
        void GetBufferParameter(OpenTK.Graphics.OpenGL.BufferTarget target, OpenTK.Graphics.OpenGL.BufferParameterName pname, [OutAttribute] Int32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetBufferParameteriv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferParameterName)pname, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        public static
        void GetBufferParameter(OpenTK.Graphics.OpenGL.BufferTarget target, OpenTK.Graphics.OpenGL.BufferParameterName pname, [OutAttribute] out Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetBufferParameteriv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        public static
        unsafe void GetBufferParameter(OpenTK.Graphics.OpenGL.BufferTarget target, OpenTK.Graphics.OpenGL.BufferParameterName pname, [OutAttribute] Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetBufferParameteriv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferParameterName)pname, (Int32*)@params);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static
        void GetBufferPointer(OpenTK.Graphics.OpenGL.BufferTarget target, OpenTK.Graphics.OpenGL.BufferPointer pname, [OutAttribute] IntPtr @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetBufferPointerv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferPointer)pname, (IntPtr)@params);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static
        void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL.BufferTarget target, OpenTK.Graphics.OpenGL.BufferPointer pname, [InAttribute, OutAttribute] T2[] @params)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferPointerv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static
        void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL.BufferTarget target, OpenTK.Graphics.OpenGL.BufferPointer pname, [InAttribute, OutAttribute] T2[,] @params)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferPointerv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static
        void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL.BufferTarget target, OpenTK.Graphics.OpenGL.BufferPointer pname, [InAttribute, OutAttribute] T2[, ,] @params)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferPointerv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static
        void GetBufferPointer<T2>(OpenTK.Graphics.OpenGL.BufferTarget target, OpenTK.Graphics.OpenGL.BufferPointer pname, [InAttribute, OutAttribute] ref T2 @params)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferPointerv((OpenTK.Graphics.OpenGL.BufferTarget)target, (OpenTK.Graphics.OpenGL.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    @params = (T2)@params_ptr.Target;
                }
                finally
                {
                    @params_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being returned.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static
        void GetBufferSubData(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [OutAttribute] IntPtr data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being returned.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static
        void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being returned.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static
        void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being returned.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static
        void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[, ,] data)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being returned.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static
        void GetBufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T3)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }




        /// <summary>
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a query object target. Must be GL_SAMPLES_PASSED.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryiv")]
        public static
        void GetQuery(OpenTK.Graphics.OpenGL.QueryTarget target, OpenTK.Graphics.OpenGL.GetQueryParam pname, [OutAttribute] Int32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetQueryiv((OpenTK.Graphics.OpenGL.QueryTarget)target, (OpenTK.Graphics.OpenGL.GetQueryParam)pname, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a query object target. Must be GL_SAMPLES_PASSED.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryiv")]
        public static
        void GetQuery(OpenTK.Graphics.OpenGL.QueryTarget target, OpenTK.Graphics.OpenGL.GetQueryParam pname, [OutAttribute] out Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryiv((OpenTK.Graphics.OpenGL.QueryTarget)target, (OpenTK.Graphics.OpenGL.GetQueryParam)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a query object target. Must be GL_SAMPLES_PASSED.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryiv")]
        public static
        unsafe void GetQuery(OpenTK.Graphics.OpenGL.QueryTarget target, OpenTK.Graphics.OpenGL.GetQueryParam pname, [OutAttribute] Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetQueryiv((OpenTK.Graphics.OpenGL.QueryTarget)target, (OpenTK.Graphics.OpenGL.GetQueryParam)pname, (Int32*)@params);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static
        void GetQueryObject(Int32 id, OpenTK.Graphics.OpenGL.GetQueryObjectParam pname, [OutAttribute] Int32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        /// <summary>
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static
        void GetQueryObject(Int32 id, OpenTK.Graphics.OpenGL.GetQueryObjectParam pname, [OutAttribute] out Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static
        unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.OpenGL.GetQueryObjectParam pname, [OutAttribute] Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (Int32*)@params);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static
        void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL.GetQueryObjectParam pname, [OutAttribute] Int32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static
        void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL.GetQueryObjectParam pname, [OutAttribute] out Int32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static
        unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL.GetQueryObjectParam pname, [OutAttribute] Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (Int32*)@params);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        public static
        void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL.GetQueryObjectParam pname, [OutAttribute] UInt32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectuiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (UInt32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        public static
        void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL.GetQueryObjectParam pname, [OutAttribute] out UInt32 @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectuiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return parameters of a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object parameter. Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        public static
        unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.OpenGL.GetQueryObjectParam pname, [OutAttribute] UInt32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetQueryObjectuiv((UInt32)id, (OpenTK.Graphics.OpenGL.GetQueryObjectParam)pname, (UInt32*)@params);
#if DEBUG
            }
#endif
        }

        /// <summary>
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specifies a value that may be the name of a buffer object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glIsBuffer")]
        public static
        bool IsBuffer(Int32 buffer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glIsBuffer((UInt32)buffer);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specifies a value that may be the name of a buffer object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glIsBuffer")]
        public static
        bool IsBuffer(UInt32 buffer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glIsBuffer((UInt32)buffer);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static
        void DeleteBuffers(Int32 n, Int32[] buffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* buffers_ptr = buffers)
                    {
                        Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static
        void DeleteBuffers(Int32 n, ref Int32 buffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* buffers_ptr = &buffers)
                    {
                        Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static
        unsafe void DeleteBuffers(Int32 n, Int32* buffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static
        void DeleteBuffers(Int32 n, UInt32[] buffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* buffers_ptr = buffers)
                    {
                        Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static
        void DeleteBuffers(Int32 n, ref UInt32 buffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* buffers_ptr = &buffers)
                    {
                        Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        /// <summary>
        /// Select active texture unit
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. texture must be one of GL_TEXTURE, where i ranges from 0 to the larger of (GL_MAX_TEXTURE_COORDS - 1) and (GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1). The initial value is GL_TEXTURE0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glActiveTexture")]
        public static
        void ActiveTexture(OpenTK.Graphics.OpenGL.TextureUnit texture)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glActiveTexture((OpenTK.Graphics.OpenGL.TextureUnit)texture);
#if DEBUG
            }
#endif
        }

        /// <summary>
        /// Attaches a shader object to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to which a shader object will be attached.
        /// </para>
        /// </param>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object that is to be attached.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glAttachShader")]
        public static
        void AttachShader(Int32 program, Int32 shader)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glAttachShader((UInt32)program, (UInt32)shader);
#if DEBUG
            }
#endif
        }

        /// <summary>
        /// Attaches a shader object to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to which a shader object will be attached.
        /// </para>
        /// </param>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object that is to be attached.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glAttachShader")]
        public static
        void AttachShader(UInt32 program, UInt32 shader)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glAttachShader((UInt32)program, (UInt32)shader);
#if DEBUG
            }
#endif
        }


        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glBeginConditionalRender")]
        public static
        void BeginConditionalRender(Int32 id, OpenTK.Graphics.OpenGL.ConditionalRenderType mode)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBeginConditionalRender((UInt32)id, (OpenTK.Graphics.OpenGL.ConditionalRenderType)mode);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glBeginConditionalRender")]
        public static
        void BeginConditionalRender(UInt32 id, OpenTK.Graphics.OpenGL.ConditionalRenderType mode)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBeginConditionalRender((UInt32)id, (OpenTK.Graphics.OpenGL.ConditionalRenderType)mode);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Delimit the boundaries of a query object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be GL_SAMPLES_PASSED.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBeginQuery")]
        public static
        void BeginQuery(OpenTK.Graphics.OpenGL.QueryTarget target, Int32 id)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBeginQuery((OpenTK.Graphics.OpenGL.QueryTarget)target, (UInt32)id);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Delimit the boundaries of a query object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be GL_SAMPLES_PASSED.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBeginQuery")]
        public static
        void BeginQuery(OpenTK.Graphics.OpenGL.QueryTarget target, UInt32 id)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBeginQuery((OpenTK.Graphics.OpenGL.QueryTarget)target, (UInt32)id);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glBeginTransformFeedback")]
        public static
        void BeginTransformFeedback(OpenTK.Graphics.OpenGL.BeginFeedbackMode primitiveMode)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBeginTransformFeedback((OpenTK.Graphics.OpenGL.BeginFeedbackMode)primitiveMode);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Associates a generic vertex attribute index with a named attribute variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object in which the association is to be made.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be bound.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glBindAttribLocation")]
        public static
        void BindAttribLocation(Int32 program, Int32 index, String name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBindAttribLocation((UInt32)program, (UInt32)index, (String)name);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Associates a generic vertex attribute index with a named attribute variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object in which the association is to be made.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be bound.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glBindAttribLocation")]
        public static
        void BindAttribLocation(UInt32 program, UInt32 index, String name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBindAttribLocation((UInt32)program, (UInt32)index, (String)name);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Specifies the name of a buffer object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBindBuffer")]
        public static
        void BindBuffer(OpenTK.Graphics.OpenGL.BufferTarget target, Int32 buffer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBindBuffer((OpenTK.Graphics.OpenGL.BufferTarget)target, (UInt32)buffer);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Specifies the name of a buffer object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBindBuffer")]
        public static
        void BindBuffer(OpenTK.Graphics.OpenGL.BufferTarget target, UInt32 buffer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBindBuffer((OpenTK.Graphics.OpenGL.BufferTarget)target, (UInt32)buffer);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glBindBufferBase")]
        public static
        void BindBufferBase(OpenTK.Graphics.OpenGL.BufferTarget target, Int32 index, Int32 buffer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBindBufferBase((OpenTK.Graphics.OpenGL.BufferTarget)target, (UInt32)index, (UInt32)buffer);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glBindBufferBase")]
        public static
        void BindBufferBase(OpenTK.Graphics.OpenGL.BufferTarget target, UInt32 index, UInt32 buffer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBindBufferBase((OpenTK.Graphics.OpenGL.BufferTarget)target, (UInt32)index, (UInt32)buffer);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glBindBufferRange")]
        public static
        void BindBufferRange(OpenTK.Graphics.OpenGL.BufferTarget target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBindBufferRange((OpenTK.Graphics.OpenGL.BufferTarget)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glBindBufferRange")]
        public static
        void BindBufferRange(OpenTK.Graphics.OpenGL.BufferTarget target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBindBufferRange((OpenTK.Graphics.OpenGL.BufferTarget)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glBindFragDataLocation")]
        public static
        void BindFragDataLocation(Int32 program, Int32 color, String name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBindFragDataLocation((UInt32)program, (UInt32)color, (String)name);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glBindFragDataLocation")]
        public static
        void BindFragDataLocation(UInt32 program, UInt32 color, String name)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBindFragDataLocation((UInt32)program, (UInt32)color, (String)name);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glBindFramebuffer")]
        public static
        void BindFramebuffer(OpenTK.Graphics.OpenGL.FramebufferTarget target, Int32 framebuffer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBindFramebuffer((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (UInt32)framebuffer);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glBindFramebuffer")]
        public static
        void BindFramebuffer(OpenTK.Graphics.OpenGL.FramebufferTarget target, UInt32 framebuffer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBindFramebuffer((OpenTK.Graphics.OpenGL.FramebufferTarget)target, (UInt32)framebuffer);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glBindRenderbuffer")]
        public static
        void BindRenderbuffer(OpenTK.Graphics.OpenGL.RenderbufferTarget target, Int32 renderbuffer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBindRenderbuffer((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (UInt32)renderbuffer);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glBindRenderbuffer")]
        public static
        void BindRenderbuffer(OpenTK.Graphics.OpenGL.RenderbufferTarget target, UInt32 renderbuffer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBindRenderbuffer((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (UInt32)renderbuffer);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glBindVertexArray")]
        public static
        void BindVertexArray(Int32 array)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBindVertexArray((UInt32)array);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glBindVertexArray")]
        public static
        void BindVertexArray(UInt32 array)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBindVertexArray((UInt32)array);
#if DEBUG
            }
#endif
        }



        /// <summary>
        /// Set the RGB blend equation and the alpha blend equation separately
        /// </summary>
        /// <param name="modeRGB">
        /// <para>
        /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>
        /// <param name="modeAlpha">
        /// <para>
        /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glBlendEquationSeparate")]
        public static
        void BlendEquationSeparate(OpenTK.Graphics.OpenGL.BlendEquationMode modeRGB, OpenTK.Graphics.OpenGL.BlendEquationMode modeAlpha)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBlendEquationSeparate((OpenTK.Graphics.OpenGL.BlendEquationMode)modeRGB, (OpenTK.Graphics.OpenGL.BlendEquationMode)modeAlpha);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="srcRGB">
        /// <para>
        /// Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA, GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, GL_ONE_MINUS_CONSTANT_ALPHA, and GL_SRC_ALPHA_SATURATE. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dstRGB">
        /// <para>
        /// Specifies how the red, green, and blue destination blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA. GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, and GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is GL_ZERO.
        /// </para>
        /// </param>
        /// <param name="srcAlpha">
        /// <para>
        /// Specified how the alpha source blending factor is computed. The same symbolic constants are accepted as for srcRGB. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dstAlpha">
        /// <para>
        /// Specified how the alpha destination blending factor is computed. The same symbolic constants are accepted as for dstRGB. The initial value is GL_ZERO.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glBlendFuncSeparate")]
        public static
        void BlendFuncSeparate(OpenTK.Graphics.OpenGL.BlendingFactorSrc sfactorRGB, OpenTK.Graphics.OpenGL.BlendingFactorDest dfactorRGB, OpenTK.Graphics.OpenGL.BlendingFactorSrc sfactorAlpha, OpenTK.Graphics.OpenGL.BlendingFactorDest dfactorAlpha)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBlendFuncSeparate((OpenTK.Graphics.OpenGL.BlendingFactorSrc)sfactorRGB, (OpenTK.Graphics.OpenGL.BlendingFactorDest)dfactorRGB, (OpenTK.Graphics.OpenGL.BlendingFactorSrc)sfactorAlpha, (OpenTK.Graphics.OpenGL.BlendingFactorDest)dfactorAlpha);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glBlitFramebuffer")]
        public static
        void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.OpenGL.ClearBufferMask mask, OpenTK.Graphics.OpenGL.BlitFramebufferFilter filter)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBlitFramebuffer((Int32)srcX0, (Int32)srcY0, (Int32)srcX1, (Int32)srcY1, (Int32)dstX0, (Int32)dstY0, (Int32)dstX1, (Int32)dstY1, (OpenTK.Graphics.OpenGL.ClearBufferMask)mask, (OpenTK.Graphics.OpenGL.BlitFramebufferFilter)filter);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBufferData")]
        public static
        void BufferData(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr size, IntPtr data, OpenTK.Graphics.OpenGL.BufferUsageHint usage)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBufferData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)size, (IntPtr)data, (OpenTK.Graphics.OpenGL.BufferUsageHint)usage);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBufferData")]
        public static
        void BufferData<T2>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.OpenGL.BufferUsageHint usage)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.BufferUsageHint)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBufferData")]
        public static
        void BufferData<T2>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[,] data, OpenTK.Graphics.OpenGL.BufferUsageHint usage)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.BufferUsageHint)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBufferData")]
        public static
        void BufferData<T2>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[, ,] data, OpenTK.Graphics.OpenGL.BufferUsageHint usage)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.BufferUsageHint)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBufferData")]
        public static
        void BufferData<T2>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] ref T2 data, OpenTK.Graphics.OpenGL.BufferUsageHint usage)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.OpenGL.BufferUsageHint)usage);
                    data = (T2)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static
        void BufferSubData(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, IntPtr data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static
        void BufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static
        void BufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static
        void BufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[, ,] data)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static
        void BufferSubData<T3>(OpenTK.Graphics.OpenGL.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferSubData((OpenTK.Graphics.OpenGL.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T3)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glCheckFramebufferStatus")]
        public static
        OpenTK.Graphics.OpenGL.FramebufferErrorCode CheckFramebufferStatus(OpenTK.Graphics.OpenGL.FramebufferTarget target)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                return Delegates.glCheckFramebufferStatus((OpenTK.Graphics.OpenGL.FramebufferTarget)target);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClampColor")]
        public static
        void ClampColor(OpenTK.Graphics.OpenGL.ClampColorTarget target, OpenTK.Graphics.OpenGL.ClampColorMode clamp)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glClampColor((OpenTK.Graphics.OpenGL.ClampColorTarget)target, (OpenTK.Graphics.OpenGL.ClampColorMode)clamp);
#if DEBUG
            }
#endif
        }



        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClearBufferfi")]
        public static
        void ClearBuffer(OpenTK.Graphics.OpenGL.ClearBuffer buffer, Int32 drawbuffer, Single depth, Int32 stencil)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glClearBufferfi((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (Single)depth, (Int32)stencil);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClearBufferfv")]
        public static
        void ClearBuffer(OpenTK.Graphics.OpenGL.ClearBuffer buffer, Int32 drawbuffer, Single[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glClearBufferfv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClearBufferfv")]
        public static
        void ClearBuffer(OpenTK.Graphics.OpenGL.ClearBuffer buffer, Int32 drawbuffer, ref Single value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glClearBufferfv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (Single*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClearBufferfv")]
        public static
        unsafe void ClearBuffer(OpenTK.Graphics.OpenGL.ClearBuffer buffer, Int32 drawbuffer, Single* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glClearBufferfv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (Single*)value);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClearBufferiv")]
        public static
        void ClearBuffer(OpenTK.Graphics.OpenGL.ClearBuffer buffer, Int32 drawbuffer, Int32[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glClearBufferiv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (Int32*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClearBufferiv")]
        public static
        void ClearBuffer(OpenTK.Graphics.OpenGL.ClearBuffer buffer, Int32 drawbuffer, ref Int32 value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glClearBufferiv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (Int32*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClearBufferiv")]
        public static
        unsafe void ClearBuffer(OpenTK.Graphics.OpenGL.ClearBuffer buffer, Int32 drawbuffer, Int32* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glClearBufferiv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (Int32*)value);
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        public static
        void ClearBuffer(OpenTK.Graphics.OpenGL.ClearBuffer buffer, Int32 drawbuffer, UInt32[] value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glClearBufferuiv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (UInt32*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        public static
        void ClearBuffer(OpenTK.Graphics.OpenGL.ClearBuffer buffer, Int32 drawbuffer, ref UInt32 value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glClearBufferuiv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (UInt32*)value_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        public static
        unsafe void ClearBuffer(OpenTK.Graphics.OpenGL.ClearBuffer buffer, Int32 drawbuffer, UInt32* value)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glClearBufferuiv((OpenTK.Graphics.OpenGL.ClearBuffer)buffer, (Int32)drawbuffer, (UInt32*)value);
#if DEBUG
            }
#endif
        }

        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord1d")]
        public static
        void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Double s)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord1d((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double)s);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord1dv")]
        public static
        unsafe void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Double* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord1dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord1f")]
        public static
        void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Single s)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord1f((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single)s);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord1fv")]
        public static
        unsafe void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Single* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord1fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord1i")]
        public static
        void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Int32 s)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord1i((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32)s);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord1iv")]
        public static
        unsafe void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Int32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord1iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord1s")]
        public static
        void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Int16 s)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord1s((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16)s);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord1sv")]
        public static
        unsafe void MultiTexCoord1(OpenTK.Graphics.OpenGL.TextureUnit target, Int16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord1sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord2d")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Double s, Double t)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord2d((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double)s, (Double)t);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord2dv")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Double[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord2dv")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, ref Double v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord2dv")]
        public static
        unsafe void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Double* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord2dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord2f")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Single s, Single t)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord2f((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single)s, (Single)t);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord2fv")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Single[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord2fv")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, ref Single v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord2fv")]
        public static
        unsafe void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Single* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord2fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord2i")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Int32 s, Int32 t)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord2i((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32)s, (Int32)t);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord2iv")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Int32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord2iv")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, ref Int32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord2iv")]
        public static
        unsafe void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Int32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord2iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord2s")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Int16 s, Int16 t)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord2s((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16)s, (Int16)t);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord2sv")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Int16[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord2sv")]
        public static
        void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, ref Int16 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord2sv")]
        public static
        unsafe void MultiTexCoord2(OpenTK.Graphics.OpenGL.TextureUnit target, Int16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord2sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord3d")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Double s, Double t, Double r)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord3d((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double)s, (Double)t, (Double)r);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord3dv")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Double[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord3dv")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, ref Double v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord3dv")]
        public static
        unsafe void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Double* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord3dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord3f")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Single s, Single t, Single r)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord3f((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single)s, (Single)t, (Single)r);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord3fv")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Single[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord3fv")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, ref Single v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord3fv")]
        public static
        unsafe void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Single* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord3fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord3i")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Int32 s, Int32 t, Int32 r)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord3i((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32)s, (Int32)t, (Int32)r);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord3iv")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Int32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord3iv")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, ref Int32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord3iv")]
        public static
        unsafe void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Int32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord3iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord3s")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Int16 s, Int16 t, Int16 r)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord3s((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16)s, (Int16)t, (Int16)r);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord3sv")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Int16[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord3sv")]
        public static
        void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, ref Int16 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord3sv")]
        public static
        unsafe void MultiTexCoord3(OpenTK.Graphics.OpenGL.TextureUnit target, Int16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord3sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord4d")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Double s, Double t, Double r, Double q)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord4d((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double)s, (Double)t, (Double)r, (Double)q);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord4dv")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Double[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord4dv")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, ref Double v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord4dv")]
        public static
        unsafe void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Double* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord4dv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Double*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord4f")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Single s, Single t, Single r, Single q)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord4f((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single)s, (Single)t, (Single)r, (Single)q);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord4fv")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Single[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord4fv")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, ref Single v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord4fv")]
        public static
        unsafe void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Single* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord4fv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Single*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord4i")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Int32 s, Int32 t, Int32 r, Int32 q)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord4i((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32)s, (Int32)t, (Int32)r, (Int32)q);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord4iv")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Int32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord4iv")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, ref Int32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord4iv")]
        public static
        unsafe void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Int32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord4iv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int32*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord4s")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Int16 s, Int16 t, Int16 r, Int16 q)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord4s((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16)s, (Int16)t, (Int16)r, (Int16)q);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord4sv")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Int16[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }
        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord4sv")]
        public static
        void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, ref Int16 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current texture coordinates
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.
        /// </para>
        /// </param>
        /// <param name="s">
        /// <para>
        /// Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultiTexCoord4sv")]
        public static
        unsafe void MultiTexCoord4(OpenTK.Graphics.OpenGL.TextureUnit target, Int16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiTexCoord4sv((OpenTK.Graphics.OpenGL.TextureUnit)target, (Int16*)v);
#if DEBUG
            }
#endif
        }



        /// <summary>
        /// Multiply the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">
        /// <para>
        /// Points to 16 consecutive values that are used as the elements of a 4 times 4 row-major matrix.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultTransposeMatrixd")]
        public static
        void MultTransposeMatrix(Double[] m)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glMultTransposeMatrixd((Double*)m_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Multiply the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">
        /// <para>
        /// Points to 16 consecutive values that are used as the elements of a 4 times 4 row-major matrix.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultTransposeMatrixd")]
        public static
        void MultTransposeMatrix(ref Double m)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glMultTransposeMatrixd((Double*)m_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Multiply the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">
        /// <para>
        /// Points to 16 consecutive values that are used as the elements of a 4 times 4 row-major matrix.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultTransposeMatrixd")]
        public static
        unsafe void MultTransposeMatrix(Double* m)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultTransposeMatrixd((Double*)m);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Multiply the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">
        /// <para>
        /// Points to 16 consecutive values that are used as the elements of a 4 times 4 row-major matrix.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultTransposeMatrixf")]
        public static
        void MultTransposeMatrix(Single[] m)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glMultTransposeMatrixf((Single*)m_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Multiply the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">
        /// <para>
        /// Points to 16 consecutive values that are used as the elements of a 4 times 4 row-major matrix.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultTransposeMatrixf")]
        public static
        void MultTransposeMatrix(ref Single m)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glMultTransposeMatrixf((Single*)m_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Multiply the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">
        /// <para>
        /// Points to 16 consecutive values that are used as the elements of a 4 times 4 row-major matrix.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glMultTransposeMatrixf")]
        public static
        unsafe void MultTransposeMatrix(Single* m)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultTransposeMatrixf((Single*)m);
#if DEBUG
            }
#endif
        }


        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glRenderbufferStorage")]
        public static
        void RenderbufferStorage(OpenTK.Graphics.OpenGL.RenderbufferTarget target, OpenTK.Graphics.OpenGL.RenderbufferStorage internalformat, Int32 width, Int32 height)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glRenderbufferStorage((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (OpenTK.Graphics.OpenGL.RenderbufferStorage)internalformat, (Int32)width, (Int32)height);
#if DEBUG
            }
#endif
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glRenderbufferStorageMultisample")]
        public static
        void RenderbufferStorageMultisample(OpenTK.Graphics.OpenGL.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.OpenGL.RenderbufferStorage internalformat, Int32 width, Int32 height)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glRenderbufferStorageMultisample((OpenTK.Graphics.OpenGL.RenderbufferTarget)target, (Int32)samples, (OpenTK.Graphics.OpenGL.RenderbufferStorage)internalformat, (Int32)width, (Int32)height);
#if DEBUG
            }
#endif
        }



        /// <summary>
        /// Specify multisample coverage parameters
        /// </summary>
        /// <param name="value">
        /// <para>
        /// Specify a single floating-point sample coverage value. The value is clamped to the range [0 ,1]. The initial value is 1.0.
        /// </para>
        /// </param>
        /// <param name="invert">
        /// <para>
        /// Specify a single boolean value representing if the coverage masks should be inverted. GL_TRUE and GL_FALSE are accepted. The initial value is GL_FALSE.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glSampleCoverage")]
        public static
        void SampleCoverage(Single value, bool invert)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glSampleCoverage((Single)value, (bool)invert);
#if DEBUG
            }
#endif
        }

      


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3b")]
        public static
        void SecondaryColor3(SByte red, SByte green, SByte blue)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glSecondaryColor3b((SByte)red, (SByte)green, (SByte)blue);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3bv")]
        public static
        void SecondaryColor3(SByte[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3bv((SByte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3bv")]
        public static
        void SecondaryColor3(ref SByte v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3bv((SByte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3bv")]
        public static
        unsafe void SecondaryColor3(SByte* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glSecondaryColor3bv((SByte*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3d")]
        public static
        void SecondaryColor3(Double red, Double green, Double blue)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glSecondaryColor3d((Double)red, (Double)green, (Double)blue);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3dv")]
        public static
        void SecondaryColor3(Double[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3dv((Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3dv")]
        public static
        void SecondaryColor3(ref Double v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3dv((Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3dv")]
        public static
        unsafe void SecondaryColor3(Double* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glSecondaryColor3dv((Double*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3f")]
        public static
        void SecondaryColor3(Single red, Single green, Single blue)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glSecondaryColor3f((Single)red, (Single)green, (Single)blue);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3fv")]
        public static
        void SecondaryColor3(Single[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3fv((Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3fv")]
        public static
        void SecondaryColor3(ref Single v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3fv((Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3fv")]
        public static
        unsafe void SecondaryColor3(Single* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glSecondaryColor3fv((Single*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3i")]
        public static
        void SecondaryColor3(Int32 red, Int32 green, Int32 blue)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glSecondaryColor3i((Int32)red, (Int32)green, (Int32)blue);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3iv")]
        public static
        void SecondaryColor3(Int32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3iv((Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3iv")]
        public static
        void SecondaryColor3(ref Int32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3iv((Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3iv")]
        public static
        unsafe void SecondaryColor3(Int32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glSecondaryColor3iv((Int32*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3s")]
        public static
        void SecondaryColor3(Int16 red, Int16 green, Int16 blue)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glSecondaryColor3s((Int16)red, (Int16)green, (Int16)blue);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3sv")]
        public static
        void SecondaryColor3(Int16[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3sv((Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3sv")]
        public static
        void SecondaryColor3(ref Int16 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3sv((Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3sv")]
        public static
        unsafe void SecondaryColor3(Int16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glSecondaryColor3sv((Int16*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3ub")]
        public static
        void SecondaryColor3(Byte red, Byte green, Byte blue)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glSecondaryColor3ub((Byte)red, (Byte)green, (Byte)blue);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3ubv")]
        public static
        void SecondaryColor3(Byte[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3ubv((Byte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3ubv")]
        public static
        void SecondaryColor3(ref Byte v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3ubv((Byte*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3ubv")]
        public static
        unsafe void SecondaryColor3(Byte* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glSecondaryColor3ubv((Byte*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3ui")]
        public static
        void SecondaryColor3(UInt32 red, UInt32 green, UInt32 blue)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glSecondaryColor3ui((UInt32)red, (UInt32)green, (UInt32)blue);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3uiv")]
        public static
        void SecondaryColor3(UInt32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3uiv((UInt32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3uiv")]
        public static
        void SecondaryColor3(ref UInt32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3uiv((UInt32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3uiv")]
        public static
        unsafe void SecondaryColor3(UInt32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glSecondaryColor3uiv((UInt32*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3us")]
        public static
        void SecondaryColor3(UInt16 red, UInt16 green, UInt16 blue)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glSecondaryColor3us((UInt16)red, (UInt16)green, (UInt16)blue);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3usv")]
        public static
        void SecondaryColor3(UInt16[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt16* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3usv((UInt16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3usv")]
        public static
        void SecondaryColor3(ref UInt16 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt16* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3usv((UInt16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current secondary color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify new red, green, and blue values for the current secondary color.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColor3usv")]
        public static
        unsafe void SecondaryColor3(UInt16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glSecondaryColor3usv((UInt16*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Define an array of secondary colors
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per color. Must be 3.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static
        void SecondaryColorPointer(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, IntPtr pointer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glSecondaryColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Define an array of secondary colors
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per color. Must be 3.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static
        void SecondaryColorPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glSecondaryColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Define an array of secondary colors
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per color. Must be 3.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static
        void SecondaryColorPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glSecondaryColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Define an array of secondary colors
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per color. Must be 3.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static
        void SecondaryColorPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[, ,] pointer)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glSecondaryColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Define an array of secondary colors
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per color. Must be 3.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static
        void SecondaryColorPointer<T3>(Int32 size, OpenTK.Graphics.OpenGL.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glSecondaryColorPointer((Int32)size, (OpenTK.Graphics.OpenGL.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T3)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }



        //=============

        /// <summary>
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glShaderSource")]
        public static
        void ShaderSource(Int32 shader, Int32 count, String[] @string, ref Int32 length)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glShaderSource((UInt32)shader, (Int32)count, (String[])@string, (Int32*)length_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glShaderSource")]
        public static
        unsafe void ShaderSource(Int32 shader, Int32 count, String[] @string, Int32* length)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glShaderSource((UInt32)shader, (Int32)count, (String[])@string, (Int32*)length);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glShaderSource")]
        public static
        void ShaderSource(UInt32 shader, Int32 count, String[] @string, ref Int32 length)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glShaderSource((UInt32)shader, (Int32)count, (String[])@string, (Int32*)length_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glShaderSource")]
        public static
        unsafe void ShaderSource(UInt32 shader, Int32 count, String[] @string, Int32* length)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glShaderSource((UInt32)shader, (Int32)count, (String[])@string, (Int32*)length);
#if DEBUG
            }
#endif
        }




        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos2d")]
        public static
        void WindowPos2(Double x, Double y)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glWindowPos2d((Double)x, (Double)y);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos2dv")]
        public static
        void WindowPos2(Double[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glWindowPos2dv((Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos2dv")]
        public static
        void WindowPos2(ref Double v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glWindowPos2dv((Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos2dv")]
        public static
        unsafe void WindowPos2(Double* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glWindowPos2dv((Double*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos2f")]
        public static
        void WindowPos2(Single x, Single y)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glWindowPos2f((Single)x, (Single)y);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos2fv")]
        public static
        void WindowPos2(Single[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glWindowPos2fv((Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos2fv")]
        public static
        void WindowPos2(ref Single v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glWindowPos2fv((Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos2fv")]
        public static
        unsafe void WindowPos2(Single* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glWindowPos2fv((Single*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos2i")]
        public static
        void WindowPos2(Int32 x, Int32 y)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glWindowPos2i((Int32)x, (Int32)y);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos2iv")]
        public static
        void WindowPos2(Int32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glWindowPos2iv((Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos2iv")]
        public static
        void WindowPos2(ref Int32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glWindowPos2iv((Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos2iv")]
        public static
        unsafe void WindowPos2(Int32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glWindowPos2iv((Int32*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos2s")]
        public static
        void WindowPos2(Int16 x, Int16 y)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glWindowPos2s((Int16)x, (Int16)y);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos2sv")]
        public static
        void WindowPos2(Int16[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glWindowPos2sv((Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos2sv")]
        public static
        void WindowPos2(ref Int16 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glWindowPos2sv((Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos2sv")]
        public static
        unsafe void WindowPos2(Int16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glWindowPos2sv((Int16*)v);
#if DEBUG
            }
#endif
        }




        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos3d")]
        public static
        void WindowPos3(Double x, Double y, Double z)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glWindowPos3d((Double)x, (Double)y, (Double)z);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos3dv")]
        public static
        void WindowPos3(Double[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glWindowPos3dv((Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos3dv")]
        public static
        void WindowPos3(ref Double v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glWindowPos3dv((Double*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos3dv")]
        public static
        unsafe void WindowPos3(Double* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glWindowPos3dv((Double*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos3f")]
        public static
        void WindowPos3(Single x, Single y, Single z)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glWindowPos3f((Single)x, (Single)y, (Single)z);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos3fv")]
        public static
        void WindowPos3(Single[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glWindowPos3fv((Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos3fv")]
        public static
        void WindowPos3(ref Single v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glWindowPos3fv((Single*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos3fv")]
        public static
        unsafe void WindowPos3(Single* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glWindowPos3fv((Single*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos3i")]
        public static
        void WindowPos3(Int32 x, Int32 y, Int32 z)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glWindowPos3i((Int32)x, (Int32)y, (Int32)z);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos3iv")]
        public static
        void WindowPos3(Int32[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glWindowPos3iv((Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos3iv")]
        public static
        void WindowPos3(ref Int32 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glWindowPos3iv((Int32*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos3iv")]
        public static
        unsafe void WindowPos3(Int32* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glWindowPos3iv((Int32*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos3s")]
        public static
        void WindowPos3(Int16 x, Int16 y, Int16 z)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glWindowPos3s((Int16)x, (Int16)y, (Int16)z);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos3sv")]
        public static
        void WindowPos3(Int16[] v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glWindowPos3sv((Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos3sv")]
        public static
        void WindowPos3(ref Int16 v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glWindowPos3sv((Int16*)v_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify the raster position in window coordinates for pixel operations
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the , , coordinates for the raster position.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glWindowPos3sv")]
        public static
        unsafe void WindowPos3(Int16* v)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glWindowPos3sv((Int16*)v);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static
        void CompressedTexImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glCompressedTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static
        void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T6[] data)
            where T6 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static
        void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T6[,] data)
            where T6 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static
        void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T6[, ,] data)
            where T6 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static
        void CompressedTexImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T6 data)
            where T6 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T6)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static
        void CompressedTexImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glCompressedTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static
        void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] data)
            where T7 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static
        void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] data)
            where T7 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static
        void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[, ,] data)
            where T7 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }



        /// <summary>
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static
        void CompressedTexImage2D<T7>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 data)
            where T7 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T7)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static
        void CompressedTexImage3D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glCompressedTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static
        void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static
        void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static
        void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[, ,] data)
            where T8 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static
        void CompressedTexImage3D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, OpenTK.Graphics.OpenGL.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (OpenTK.Graphics.OpenGL.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T8)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static
        void CompressedTexSubImage1D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, IntPtr data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glCompressedTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static
        void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T6[] data)
            where T6 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static
        void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T6[,] data)
            where T6 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static
        void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T6[, ,] data)
            where T6 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static
        void CompressedTexSubImage1D<T6>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T6 data)
            where T6 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage1D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T6)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static
        void CompressedTexSubImage2D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, IntPtr data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static
        void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static
        void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static
        void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[, ,] data)
            where T8 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static
        void CompressedTexSubImage2D<T8>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T8)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static
        void CompressedTexSubImage3D(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, IntPtr data)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glCompressedTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static
        void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[] data)
            where T10 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static
        void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[,] data)
            where T10 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static
        void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[, ,] data)
            where T10 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static
        void CompressedTexSubImage3D<T10>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.OpenGL.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T10 data)
            where T10 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage3D((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.OpenGL.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T10)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
#if DEBUG
            }
#endif
        }

        /// <summary>
        /// Replace the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">
        /// <para>
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 row-major matrix.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glLoadTransposeMatrixd")]
        public static
        void LoadTransposeMatrix(Double[] m)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glLoadTransposeMatrixd((Double*)m_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Replace the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">
        /// <para>
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 row-major matrix.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glLoadTransposeMatrixd")]
        public static
        void LoadTransposeMatrix(ref Double m)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glLoadTransposeMatrixd((Double*)m_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Replace the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">
        /// <para>
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 row-major matrix.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glLoadTransposeMatrixd")]
        public static
        unsafe void LoadTransposeMatrix(Double* m)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glLoadTransposeMatrixd((Double*)m);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Replace the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">
        /// <para>
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 row-major matrix.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glLoadTransposeMatrixf")]
        public static
        void LoadTransposeMatrix(Single[] m)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glLoadTransposeMatrixf((Single*)m_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Replace the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">
        /// <para>
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 row-major matrix.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glLoadTransposeMatrixf")]
        public static
        void LoadTransposeMatrix(ref Single m)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glLoadTransposeMatrixf((Single*)m_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Replace the current matrix with the specified row-major ordered matrix
        /// </summary>
        /// <param name="m">
        /// <para>
        /// Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 row-major matrix.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glLoadTransposeMatrixf")]
        public static
        unsafe void LoadTransposeMatrix(Single* m)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glLoadTransposeMatrixf((Single*)m);
#if DEBUG
            }
#endif
        }



        /// <summary>
        /// Select active texture unit
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. texture must be one of GL_TEXTURE, where i ranges from 0 to the value of GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value. The initial value is GL_TEXTURE0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13Deprecated", Version = "1.3", EntryPoint = "glClientActiveTexture")]
        public static
        void ClientActiveTexture(OpenTK.Graphics.OpenGL.TextureUnit texture)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glClientActiveTexture((OpenTK.Graphics.OpenGL.TextureUnit)texture);
#if DEBUG
            }
#endif
        }



        /// <summary>
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, and GL_TEXTURE_3D GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
        /// </para>
        /// </param>
        /// <param name="lod">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="img">
        /// <para>
        /// Returns the compressed texture image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static
        void GetCompressedTexImage(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, [OutAttribute] IntPtr img)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glGetCompressedTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, and GL_TEXTURE_3D GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
        /// </para>
        /// </param>
        /// <param name="lod">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="img">
        /// <para>
        /// Returns the compressed texture image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static
        void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, [InAttribute, OutAttribute] T2[] img)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, and GL_TEXTURE_3D GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
        /// </para>
        /// </param>
        /// <param name="lod">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="img">
        /// <para>
        /// Returns the compressed texture image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static
        void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, [InAttribute, OutAttribute] T2[,] img)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, and GL_TEXTURE_3D GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
        /// </para>
        /// </param>
        /// <param name="lod">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="img">
        /// <para>
        /// Returns the compressed texture image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static
        void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, [InAttribute, OutAttribute] T2[, ,] img)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, and GL_TEXTURE_3D GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
        /// </para>
        /// </param>
        /// <param name="lod">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="img">
        /// <para>
        /// Returns the compressed texture image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static
        void GetCompressedTexImage<T2>(OpenTK.Graphics.OpenGL.TextureTarget target, Int32 level, [InAttribute, OutAttribute] ref T2 img)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTexImage((OpenTK.Graphics.OpenGL.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                    img = (T2)img_ptr.Target;
                }
                finally
                {
                    img_ptr.Free();
                }
#if DEBUG
            }
#endif
        }



        /// <summary>
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// Specifies the value that pname will be set to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glPointParameterf")]
        public static
        void PointParameter(OpenTK.Graphics.OpenGL.PointParameterName pname, Single param)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glPointParameterf((OpenTK.Graphics.OpenGL.PointParameterName)pname, (Single)param);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// Specifies the value that pname will be set to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glPointParameterfv")]
        public static
        void PointParameter(OpenTK.Graphics.OpenGL.PointParameterName pname, Single[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glPointParameterfv((OpenTK.Graphics.OpenGL.PointParameterName)pname, (Single*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// Specifies the value that pname will be set to.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glPointParameterfv")]
        public static
        unsafe void PointParameter(OpenTK.Graphics.OpenGL.PointParameterName pname, Single* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glPointParameterfv((OpenTK.Graphics.OpenGL.PointParameterName)pname, (Single*)@params);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// Specifies the value that pname will be set to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glPointParameteri")]
        public static
        void PointParameter(OpenTK.Graphics.OpenGL.PointParameterName pname, Int32 param)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glPointParameteri((OpenTK.Graphics.OpenGL.PointParameterName)pname, (Int32)param);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// Specifies the value that pname will be set to.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glPointParameteriv")]
        public static
        void PointParameter(OpenTK.Graphics.OpenGL.PointParameterName pname, Int32[] @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glPointParameteriv((OpenTK.Graphics.OpenGL.PointParameterName)pname, (Int32*)@params_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Specify point parameters
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies a single-valued point parameter. GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// Specifies the value that pname will be set to.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glPointParameteriv")]
        public static
        unsafe void PointParameter(OpenTK.Graphics.OpenGL.PointParameterName pname, Int32* @params)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glPointParameteriv((OpenTK.Graphics.OpenGL.PointParameterName)pname, (Int32*)@params);
#if DEBUG
            }
#endif
        }

        /// <summary>
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="first">
        /// <para>
        /// Points to an array of starting indices in the enabled arrays.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the number of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the first and count
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static
        void MultiDrawArrays(OpenTK.Graphics.OpenGL.BeginMode mode, [OutAttribute] Int32[] first, [OutAttribute] Int32[] count, Int32 primcount)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* first_ptr = first)
                    fixed (Int32* count_ptr = count)
                    {
                        Delegates.glMultiDrawArrays((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="first">
        /// <para>
        /// Points to an array of starting indices in the enabled arrays.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the number of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the first and count
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static
        void MultiDrawArrays(OpenTK.Graphics.OpenGL.BeginMode mode, [OutAttribute] out Int32 first, [OutAttribute] out Int32 count, Int32 primcount)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* first_ptr = &first)
                    fixed (Int32* count_ptr = &count)
                    {
                        Delegates.glMultiDrawArrays((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                        first = *first_ptr;
                        count = *count_ptr;
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="first">
        /// <para>
        /// Points to an array of starting indices in the enabled arrays.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the number of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the first and count
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static
        unsafe void MultiDrawArrays(OpenTK.Graphics.OpenGL.BeginMode mode, [OutAttribute] Int32* first, [OutAttribute] Int32* count, Int32 primcount)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiDrawArrays((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)first, (Int32*)count, (Int32)primcount);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the count array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements(OpenTK.Graphics.OpenGL.BeginMode mode, Int32[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices, Int32 primcount)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the count array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the count array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the count array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[, ,] indices, Int32 primcount)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the count array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32[] count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                            indices = (T3)indices_ptr.Target;
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the count array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements(OpenTK.Graphics.OpenGL.BeginMode mode, ref Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices, Int32 primcount)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the count array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, ref Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the count array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, ref Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the count array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, ref Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[, ,] indices, Int32 primcount)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the count array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, ref Int32 count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                            indices = (T3)indices_ptr.Target;
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the count array.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        unsafe void MultiDrawElements(OpenTK.Graphics.OpenGL.BeginMode mode, Int32* count, OpenTK.Graphics.OpenGL.DrawElementsType type, IntPtr indices, Int32 primcount)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the count array.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the count array.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the count array.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] T3[, ,] indices, Int32 primcount)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the count array.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static
        unsafe void MultiDrawElements<T3>(OpenTK.Graphics.OpenGL.BeginMode mode, Int32* count, OpenTK.Graphics.OpenGL.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
            where T3 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiDrawElements((OpenTK.Graphics.OpenGL.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.OpenGL.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    indices = (T3)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
#if DEBUG
            }
#endif
        }



        /// <summary>
        /// Set the current fog coordinates
        /// </summary>
        /// <param name="coord">
        /// <para>
        /// Specify the fog distance.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glFogCoordf")]
        public static
        void FogCoord(Single coord)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glFogCoordf((Single)coord);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current fog coordinates
        /// </summary>
        /// <param name="coord">
        /// <para>
        /// Specify the fog distance.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glFogCoordfv")]
        public static
        unsafe void FogCoord(Single* coord)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glFogCoordfv((Single*)coord);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Define an array of fog coordinates
        /// </summary>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each fog coordinate. Symbolic constants GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static
        void FogCoordPointer(OpenTK.Graphics.OpenGL.FogPointerType type, Int32 stride, IntPtr pointer)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glFogCoordPointer((OpenTK.Graphics.OpenGL.FogPointerType)type, (Int32)stride, (IntPtr)pointer);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Define an array of fog coordinates
        /// </summary>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each fog coordinate. Symbolic constants GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static
        void FogCoordPointer<T2>(OpenTK.Graphics.OpenGL.FogPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glFogCoordPointer((OpenTK.Graphics.OpenGL.FogPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Define an array of fog coordinates
        /// </summary>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each fog coordinate. Symbolic constants GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static
        void FogCoordPointer<T2>(OpenTK.Graphics.OpenGL.FogPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glFogCoordPointer((OpenTK.Graphics.OpenGL.FogPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Define an array of fog coordinates
        /// </summary>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each fog coordinate. Symbolic constants GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static
        void FogCoordPointer<T2>(OpenTK.Graphics.OpenGL.FogPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[, ,] pointer)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glFogCoordPointer((OpenTK.Graphics.OpenGL.FogPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Define an array of fog coordinates
        /// </summary>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each fog coordinate. Symbolic constants GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static
        void FogCoordPointer<T2>(OpenTK.Graphics.OpenGL.FogPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glFogCoordPointer((OpenTK.Graphics.OpenGL.FogPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T2)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
#if DEBUG
            }
#endif
        }



        /// <summary>
        /// Set the current fog coordinates
        /// </summary>
        /// <param name="coord">
        /// <para>
        /// Specify the fog distance.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glFogCoordd")]
        public static
        void FogCoord(Double coord)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glFogCoordd((Double)coord);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Set the current fog coordinates
        /// </summary>
        /// <param name="coord">
        /// <para>
        /// Specify the fog distance.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14Deprecated", Version = "1.4", EntryPoint = "glFogCoorddv")]
        public static
        unsafe void FogCoord(Double* coord)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glFogCoorddv((Double*)coord);
#if DEBUG
            }
#endif
        }




        public static partial class Ext
        {


            [AutoGenerated(Category = "ExtFramebufferBlit", Version = "1.5", EntryPoint = "glBlitFramebufferEXT")]
            public static
            void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.OpenGL.ClearBufferMask mask, OpenTK.Graphics.OpenGL.ExtFramebufferBlit filter)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glBlitFramebufferEXT((Int32)srcX0, (Int32)srcY0, (Int32)srcX1, (Int32)srcY1, (Int32)dstX0, (Int32)dstY0, (Int32)dstX1, (Int32)dstY1, (OpenTK.Graphics.OpenGL.ClearBufferMask)mask, (OpenTK.Graphics.OpenGL.ExtFramebufferBlit)filter);
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static
            void GetQueryObjecti64(Int32 id, OpenTK.Graphics.OpenGL.ExtTimerQuery pname, [OutAttribute] Int64[] @params)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Int64* @params_ptr = @params)
                        {
                            Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtTimerQuery)pname, (Int64*)@params_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static
            void GetQueryObjecti64(Int32 id, OpenTK.Graphics.OpenGL.ExtTimerQuery pname, [OutAttribute] out Int64 @params)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Int64* @params_ptr = &@params)
                        {
                            Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtTimerQuery)pname, (Int64*)@params_ptr);
                            @params = *@params_ptr;
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static
            unsafe void GetQueryObjecti64(Int32 id, OpenTK.Graphics.OpenGL.ExtTimerQuery pname, [OutAttribute] Int64* @params)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtTimerQuery)pname, (Int64*)@params);
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static
            void GetQueryObjecti64(UInt32 id, OpenTK.Graphics.OpenGL.ExtTimerQuery pname, [OutAttribute] Int64[] @params)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Int64* @params_ptr = @params)
                        {
                            Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtTimerQuery)pname, (Int64*)@params_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static
            void GetQueryObjecti64(UInt32 id, OpenTK.Graphics.OpenGL.ExtTimerQuery pname, [OutAttribute] out Int64 @params)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Int64* @params_ptr = &@params)
                        {
                            Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtTimerQuery)pname, (Int64*)@params_ptr);
                            @params = *@params_ptr;
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static
            unsafe void GetQueryObjecti64(UInt32 id, OpenTK.Graphics.OpenGL.ExtTimerQuery pname, [OutAttribute] Int64* @params)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtTimerQuery)pname, (Int64*)@params);
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static
            void GetQueryObjectui64(Int32 id, OpenTK.Graphics.OpenGL.ExtTimerQuery pname, [OutAttribute] Int64[] @params)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Int64* @params_ptr = @params)
                        {
                            Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtTimerQuery)pname, (UInt64*)@params_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static
            void GetQueryObjectui64(Int32 id, OpenTK.Graphics.OpenGL.ExtTimerQuery pname, [OutAttribute] out Int64 @params)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (Int64* @params_ptr = &@params)
                        {
                            Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtTimerQuery)pname, (UInt64*)@params_ptr);
                            @params = *@params_ptr;
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static
            unsafe void GetQueryObjectui64(Int32 id, OpenTK.Graphics.OpenGL.ExtTimerQuery pname, [OutAttribute] Int64* @params)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtTimerQuery)pname, (UInt64*)@params);
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static
            void GetQueryObjectui64(UInt32 id, OpenTK.Graphics.OpenGL.ExtTimerQuery pname, [OutAttribute] UInt64[] @params)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (UInt64* @params_ptr = @params)
                        {
                            Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtTimerQuery)pname, (UInt64*)@params_ptr);
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static
            void GetQueryObjectui64(UInt32 id, OpenTK.Graphics.OpenGL.ExtTimerQuery pname, [OutAttribute] out UInt64 @params)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    unsafe
                    {
                        fixed (UInt64* @params_ptr = &@params)
                        {
                            Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtTimerQuery)pname, (UInt64*)@params_ptr);
                            @params = *@params_ptr;
                        }
                    }
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static
            unsafe void GetQueryObjectui64(UInt32 id, OpenTK.Graphics.OpenGL.ExtTimerQuery pname, [OutAttribute] UInt64* @params)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.OpenGL.ExtTimerQuery)pname, (UInt64*)@params);
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtFramebufferMultisample", Version = "1.5", EntryPoint = "glRenderbufferStorageMultisampleEXT")]
            public static
            void RenderbufferStorageMultisample(OpenTK.Graphics.OpenGL.ExtFramebufferMultisample target, Int32 samples, OpenTK.Graphics.OpenGL.ExtFramebufferMultisample internalformat, Int32 width, Int32 height)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glRenderbufferStorageMultisampleEXT((OpenTK.Graphics.OpenGL.ExtFramebufferMultisample)target, (Int32)samples, (OpenTK.Graphics.OpenGL.ExtFramebufferMultisample)internalformat, (Int32)width, (Int32)height);
#if DEBUG
                }
#endif
            }

            [AutoGenerated(Category = "ExtStencilTwoSide", Version = "1.3", EntryPoint = "glActiveStencilFaceEXT")]
            public static
            void ActiveStencilFace(OpenTK.Graphics.OpenGL.ExtStencilTwoSide face)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glActiveStencilFaceEXT((OpenTK.Graphics.OpenGL.ExtStencilTwoSide)face);
#if DEBUG
                }
#endif
            }



            [AutoGenerated(Category = "ExtStencilClearTag", Version = "1.5", EntryPoint = "glStencilClearTagEXT")]
            public static
            void StencilClearTag(Int32 stencilTagBits, Int32 stencilClearTag)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glStencilClearTagEXT((Int32)stencilTagBits, (UInt32)stencilClearTag);
#if DEBUG
                }
#endif
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtStencilClearTag", Version = "1.5", EntryPoint = "glStencilClearTagEXT")]
            public static
            void StencilClearTag(Int32 stencilTagBits, UInt32 stencilClearTag)
            {
#if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
#endif
                    Delegates.glStencilClearTagEXT((Int32)stencilTagBits, (UInt32)stencilClearTag);
#if DEBUG
                }
#endif
            }
        }






        /// <summary>
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static
        unsafe void DeleteBuffers(Int32 n, UInt32* buffers)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static
        void DeleteQueries(Int32 n, Int32[] ids)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* ids_ptr = ids)
                    {
                        Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static
        void DeleteQueries(Int32 n, ref Int32 ids)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (Int32* ids_ptr = &ids)
                    {
                        Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static
        unsafe void DeleteQueries(Int32 n, Int32* ids)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDeleteQueries((Int32)n, (UInt32*)ids);
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static
        void DeleteQueries(Int32 n, UInt32[] ids)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* ids_ptr = ids)
                    {
                        Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static
        void DeleteQueries(Int32 n, ref UInt32 ids)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                unsafe
                {
                    fixed (UInt32* ids_ptr = &ids)
                    {
                        Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
                    }
                }
#if DEBUG
            }
#endif
        }


        /// <summary>
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static
        unsafe void DeleteQueries(Int32 n, UInt32* ids)
        {
#if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
#endif
                Delegates.glDeleteQueries((Int32)n, (UInt32*)ids);
#if DEBUG
            }
#endif
        }
    }
}
#endif