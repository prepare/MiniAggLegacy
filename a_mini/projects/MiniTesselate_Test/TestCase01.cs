//BSD 2014, WinterDev


/*
 * Created by SharpDevelop.
 * User: lbrubaker
 * Date: 3/26/2010
 * Time: 4:37 PM
 * 
 * To change this template use Tools | Options | Coding | Edit Standard Headers.
 */
using System;
using System.Collections.Generic;
using NUnit.Framework;
using Tesselate;
using System.Drawing;

namespace MatterHackers.Agg.Tests
{
    [TestFixture]
    public class TesselatorTests
    {
        int m_CurrentInputTest;
        int m_CurrentOutputTest;
        int m_CurrentOutput;
        string m_LastString;

        public struct Vertex
        {
            public readonly double m_X;
            public readonly double m_Y;
            public Vertex(double x, double y)
            {
                m_X = x;
                m_Y = y;
            }
#if DEBUG
            public override string ToString()
            {
                return this.m_X + "," + this.m_Y;
            }
#endif

        }

        public List<Vertex> m_VertexList = new List<Vertex>();

        public static string[][] m_InsructionStream = new string[][]
            { 
                new string[] { "BP", 
                    "BC", "V", "0", "0", "V", "60", "0", "V", "60", "60", "V", "0", "60", "EC", 
                    "BC", "V", "10", "10", "V", "50", "10", "V", "50", "50", "V", "10", "50", "EC", 
                    "BC", "V", "20", "20", "V", "40", "20", "V", "40", "40", "V", "20", "40", "EC", 
                    "EP",},  // Three boxes CCW winding
                new string[] { "BP", 
                    "BC", "V", "0", "0", "V", "60", "0", "V", "60", "60", "V", "0", "60", "EC", 
                    "BC", "V", "10", "10", "V", "10", "50", "V", "50", "50", "V", "50", "10", "EC", 
                    "BC", "V", "20", "20", "V", "20", "40", "V", "40", "40", "V", "40", "20", "EC", 
                    "EP",},  // Three boxes 1. CCW 2. CW 3. CW
                new string[] { "BP", 
                    "BC", "V", "10", "0", "V", "50", "0", "V", "50", "40", "V", "10", "40", "EC", 
                    "BC", "V", "0", "10", "V", "60", "10", "V", "60", "20", "V", "0", "20", "EC", 
                    "BC", "V", "30", "-10", "V", "40", "30", "V", "20", "30", "EC", 
                    "EP",},  // Two boxes and a triangle all CCW
                new string[] { "BP", 
                    "BC", "V", "0", "0", "V", "70", "0", "V", "70", "40", "V", "30", "40",
                    "V", "30", "30", "V", "40", "30", "V", "40", "50", "V", "20", "50",
                    "V", "20", "20", "V", "50", "20", "V", "50", "60", "V", "10", "60",
                    "V", "10", "10", "V", "60", "10", "V", "60", "70", "V", "0", "70",
                    "V", "0", "0", "EC", 
                    "EP",},  // One large CCW loop that makes about 4 boxes.
            };

        static string[][] m_TestOutput = new string[][]
        {
            // CCW, ODD
            new string[] {"B", "STRIP", "V", "0", "V", "4", "V", "3", "V", "7", "V", "2", "V", "6", "V", "1", "V", 
            "5", "V", "4", "E", "B", "FAN", "V", "11", "V", "8", "V", "9", "V", "10", "E", "B", "TRI", "V", "4", 
            "V", "0", "V", "1", "E", },
            // CCW, NON-ZERO
            new string[] {"B", "STRIP", "V", "11", "V", "8", "V", "9", "V", "5", "V", "10", "V", "6", "V", "11", 
            "V", "7", "V", "8", "V", "4", "V", "5", "V", "1", "V", "6", "V", "2", "V", "7", "V", "3", "V", "4", "V", 
            "0", "V", "1", "E", "B", "TRI", "V", "11", "V", "9", "V", "10", "E", },
            // CCW, POSITIVE
            new string[] {"B", "STRIP", "V", "11", "V", "8", "V", "9", "V", "5", "V", "10", "V", "6", "V", "11", 
            "V", "7", "V", "8", "V", "4", "V", "5", "V", "1", "V", "6", "V", "2", "V", "7", "V", "3", "V", "4", "V", 
            "0", "V", "1", "E", "B", "TRI", "V", "11", "V", "9", "V", "10", "E", },
            // CCW, NEGATIVE
            new string[] {},
            // CCW, ABS >= 2
            new string[] {"B", "STRIP", "V", "6", "V", "7", "V", "11", "V", "8", "V", "9", "V", "5", "V", "10", "V", 
            "6", "V", "11", "E", "B", "FAN", "V", "8", "V", "7", "V", "4", "V", "5", "E", "B", "TRI", "V", "11", 
            "V", "9", "V", "10", "E", },
            // CCW, ODD, EDGE FLAG
            new string[] {"B", "TRI", "F", "0", "V", "9", "F", "1", "V", "11", "V", "8", "F", "0", "V", "11", "F", 
            "1", "V", "9", "V", "10", "F", "0", "V", "0", "V", "4", "F", "1", "V", "3", "F", "0", "V", "4", "F", 
            "1", "V", "0", "F", "0", "V", "1", "V", "4", "V", "1", "F", "1", "V", "5", "F", "0", "V", "5", "V", "1", 
            "F", "1", "V", "6", "F", "0", "V", "3", "V", "7", "F", "1", "V", "2", "F", "0", "V", "7", "V", "3", "F", 
            "1", "V", "4", "F", "0", "V", "2", "F", "1", "V", "7", "F", "0", "V", "6", "V", "2", "V", "6", "F", "1", 
            "V", "1", "E", },
            // CCW, NON-ZERO, EDGE FLAG
            new string[] {"B", "TRI", "F", "0", "V", "9", "V", "11", "V", "8", "V", "11", "V", "9", "V", "10", "V", 
            "4", "V", "8", "V", "7", "V", "8", "V", "4", "V", "5", "V", "8", "V", "5", "V", "9", "V", "9", "V", "5", 
            "V", "10", "V", "7", "V", "11", "V", "6", "V", "11", "V", "7", "V", "8", "V", "6", "V", "11", "V", "10", 
            "V", "6", "V", "10", "V", "5", "V", "0", "V", "4", "F", "1", "V", "3", "F", "0", "V", "4", "F", "1", 
            "V", "0", "F", "0", "V", "1", "V", "4", "V", "1", "V", "5", "V", "5", "V", "1", "V", "6", "V", "3", "V", 
            "7", "F", "1", "V", "2", "F", "0", "V", "7", "V", "3", "V", "4", "V", "2", "V", "7", "V", "6", "V", "2", 
            "V", "6", "F", "1", "V", "1", "E", },
            // CCW, POSITIVE, EDGE FLAG
            new string[] {"B", "TRI", "F", "0", "V", "9", "V", "11", "V", "8", "V", "11", "V", "9", "V", "10", "V", 
            "4", "V", "8", "V", "7", "V", "8", "V", "4", "V", "5", "V", "8", "V", "5", "V", "9", "V", "9", "V", "5", 
            "V", "10", "V", "7", "V", "11", "V", "6", "V", "11", "V", "7", "V", "8", "V", "6", "V", "11", "V", "10", 
            "V", "6", "V", "10", "V", "5", "V", "0", "V", "4", "F", "1", "V", "3", "F", "0", "V", "4", "F", "1", 
            "V", "0", "F", "0", "V", "1", "V", "4", "V", "1", "V", "5", "V", "5", "V", "1", "V", "6", "V", "3", "V", 
            "7", "F", "1", "V", "2", "F", "0", "V", "7", "V", "3", "V", "4", "V", "2", "V", "7", "V", "6", "V", "2", 
            "V", "6", "F", "1", "V", "1", "E", },
            // CCW, NEGATIVE, EDGE FLAG
            new string[] {},
            // CCW, ABS >= 2, EDGE FLAG
            new string[] {"B", "TRI", "F", "0", "V", "9", "V", "11", "V", "8", "V", "11", "V", "9", "V", "10", "V", 
            "4", "V", "8", "F", "1", "V", "7", "F", "0", "V", "8", "F", "1", "V", "4", "F", "0", "V", "5", "V", "8", 
            "V", "5", "V", "9", "V", "9", "V", "5", "V", "10", "V", "7", "V", "11", "F", "1", "V", "6", "F", "0", 
            "V", "11", "V", "7", "V", "8", "V", "6", "V", "11", "V", "10", "V", "6", "V", "10", "F", "1", "V", "5", 
            "E", },
            // CCW - CW - CW, ODD
            new string[] {"B", "STRIP", "V", "0", "V", "4", "V", "3", "V", "5", "V", "2", "V", "6", "V", "1", "V", 
            "7", "V", "4", "E", "B", "FAN", "V", "9", "V", "8", "V", "11", "V", "10", "E", "B", "TRI", "V", "4", 
            "V", "0", "V", "1", "E", },
            // CCW - CW - CW, NON-ZERO
            new string[] {"B", "STRIP", "V", "0", "V", "4", "V", "3", "V", "5", "V", "2", "V", "6", "V", "1", "V", 
            "7", "V", "4", "E", "B", "FAN", "V", "9", "V", "8", "V", "11", "V", "10", "E", "B", "TRI", "V", "4", 
            "V", "0", "V", "1", "E", },
            // CCW - CW - CW, POSITIVE
            new string[] {"B", "STRIP", "V", "0", "V", "4", "V", "3", "V", "5", "V", "2", "V", "6", "V", "1", "V", 
            "7", "V", "4", "E", "B", "TRI", "V", "4", "V", "0", "V", "1", "E", },
            // CCW - CW - CW, NEGATIVE
            new string[] {"B", "FAN", "V", "9", "V", "8", "V", "11", "V", "10", "E", },
            // CCW - CW - CW, ABS >= 2
            new string[] {},
            // CCW - CW - CW, ODD, EDGE FLAG
            new string[] {"B", "TRI", "F", "0", "V", "11", "F", "1", "V", "9", "V", "8", "F", "0", "V", "9", "F", 
            "1", "V", "11", "V", "10", "F", "0", "V", "0", "V", "4", "F", "1", "V", "3", "F", "0", "V", "4", "F", 
            "1", "V", "0", "F", "0", "V", "1", "V", "4", "V", "1", "F", "1", "V", "7", "F", "0", "V", "7", "V", "1", 
            "F", "1", "V", "6", "F", "0", "V", "3", "V", "5", "F", "1", "V", "2", "F", "0", "V", "5", "V", "3", "F", 
            "1", "V", "4", "F", "0", "V", "2", "F", "1", "V", "5", "F", "0", "V", "6", "V", "2", "V", "6", "F", "1", 
            "V", "1", "E", },
            // CCW - CW - CW, NON-ZERO, EDGE FLAG
            new string[] {"B", "TRI", "F", "0", "V", "11", "F", "1", "V", "9", "V", "8", "F", "0", "V", "9", "F", 
            "1", "V", "11", "V", "10", "F", "0", "V", "0", "V", "4", "F", "1", "V", "3", "F", "0", "V", "4", "F", 
            "1", "V", "0", "F", "0", "V", "1", "V", "4", "V", "1", "F", "1", "V", "7", "F", "0", "V", "7", "V", "1", 
            "F", "1", "V", "6", "F", "0", "V", "3", "V", "5", "F", "1", "V", "2", "F", "0", "V", "5", "V", "3", "F", 
            "1", "V", "4", "F", "0", "V", "2", "F", "1", "V", "5", "F", "0", "V", "6", "V", "2", "V", "6", "F", "1", 
            "V", "1", "E", },
            // CCW - CW - CW, POSITIVE, EDGE FLAG
            new string[] {"B", "TRI", "F", "0", "V", "0", "V", "4", "F", "1", "V", "3", "F", "0", "V", "4", "F", 
            "1", "V", "0", "F", "0", "V", "1", "V", "4", "V", "1", "F", "1", "V", "7", "F", "0", "V", "7", "V", "1", 
            "F", "1", "V", "6", "F", "0", "V", "3", "V", "5", "F", "1", "V", "2", "F", "0", "V", "5", "V", "3", "F", 
            "1", "V", "4", "F", "0", "V", "2", "F", "1", "V", "5", "F", "0", "V", "6", "V", "2", "V", "6", "F", "1", 
            "V", "1", "E", },
            // CCW - CW - CW, NEGATIVE, EDGE FLAG
            new string[] {"B", "TRI", "F", "0", "V", "11", "F", "1", "V", "9", "V", "8", "F", "0", "V", "9", "F", 
            "1", "V", "11", "V", "10", "E", },
            // CCW - CW - CW, ABS >= 2
            new string[] {},
            // RECTS & TRI, ODD
            new string[] {"C", "10", "10", "5", "4", "3", "0", "0.0833333", "0.416667", "0.125", "0.375", "C", "10", 
            "20", "6", "7", "3", "11", "0.0833333", "0.416667", "0.166667", "0.333333", "C", "22.5", "20", "8", "10", 
            "6", "12", "0.125", "0.375", "0.125", "0.375", "C", "25", "10", "8", "13", "5", "11", "0.166667", "0.333333", 
            "0.15", "0.35", "C", "27.5", "3.46142e-008", "8", "14", "1", "0", "0.25", "0.25", "0.21875", "0.28125", 
            "C", "32.5", "1.34611e-008", "1", "15", "9", "8", "0.111111", "0.388889", "0.125", "0.375", "C", "35", 
            "10", "5", "14", "9", "16", "0.142857", "0.357143", "0.166667", "0.333333", "C", "37.5", "20", "6", "13", 
            "9", "17", "0.2", "0.3", "0.25", "0.25", "C", "50", "10", "5", "17", "2", "1", "0.3", "0.2", "0.125", 
            "0.375", "C", "50", "20", "6", "18", "2", "19", "0.277778", "0.222222", "0.166667", "0.333333", "B", 
            "FAN", "V", "7", "V", "4", "V", "11", "V", "12", "E", "B", "STRIP", "V", "12", "V", "13", "V", "3", "V", 
            "10", "V", "2", "V", "9", "V", "20", "V", "18", "E", "B", "FAN", "V", "18", "V", "13", "V", "14", "V", 
            "17", "E", "B", "FAN", "V", "20", "V", "19", "V", "5", "V", "6", "E", "B", "FAN", "V", "17", "V", "16", 
            "V", "1", "V", "19", "E", "B", "FAN", "V", "11", "V", "0", "V", "15", "V", "14", "E", "B", "TRI", "V", 
            "16", "V", "15", "V", "8", "E", },
            // RECTS & TRI, NON-ZERO
            new string[] {"C", "10", "10", "5", "4", "3", "0", "0.0833333", "0.416667", "0.125", "0.375", "C", "10", 
            "20", "6", "7", "3", "11", "0.0833333", "0.416667", "0.166667", "0.333333", "C", "22.5", "20", "8", "10", 
            "6", "12", "0.125", "0.375", "0.125", "0.375", "C", "25", "10", "8", "13", "5", "11", "0.166667", "0.333333", 
            "0.15", "0.35", "C", "27.5", "3.46142e-008", "8", "14", "1", "0", "0.25", "0.25", "0.21875", "0.28125", 
            "C", "32.5", "1.34611e-008", "1", "15", "9", "8", "0.111111", "0.388889", "0.125", "0.375", "C", "35", 
            "10", "5", "14", "9", "16", "0.142857", "0.357143", "0.166667", "0.333333", "C", "37.5", "20", "6", "13", 
            "9", "17", "0.2", "0.3", "0.25", "0.25", "C", "50", "10", "5", "17", "2", "1", "0.3", "0.2", "0.125", 
            "0.375", "C", "50", "20", "6", "18", "2", "19", "0.277778", "0.222222", "0.166667", "0.333333", "B", 
            "STRIP", "V", "7", "V", "11", "V", "12", "V", "14", "V", "13", "V", "18", "V", "9", "V", "20", "V", "2", 
            "E", "B", "FAN", "V", "10", "V", "3", "V", "13", "V", "9", "V", "2", "V", "3", "E", "B", "STRIP", "V", 
            "11", "V", "15", "V", "14", "V", "17", "V", "18", "V", "19", "V", "20", "V", "5", "V", "6", "E", "B", 
            "FAN", "V", "17", "V", "15", "V", "16", "V", "1", "V", "19", "E", "B", "TRI", "V", "15", "V", "11", "V", 
            "0", "V", "16", "V", "15", "V", "8", "V", "13", "V", "3", "V", "12", "V", "11", "V", "7", "V", "4", "E", 
            },
            // RECTS & TRI, POSITIVE
            new string[] {"C", "10", "10", "5", "4", "3", "0", "0.0833333", "0.416667", "0.125", "0.375", "C", "10", 
            "20", "6", "7", "3", "11", "0.0833333", "0.416667", "0.166667", "0.333333", "C", "22.5", "20", "8", "10", 
            "6", "12", "0.125", "0.375", "0.125", "0.375", "C", "25", "10", "8", "13", "5", "11", "0.166667", "0.333333", 
            "0.15", "0.35", "C", "27.5", "3.46142e-008", "8", "14", "1", "0", "0.25", "0.25", "0.21875", "0.28125", 
            "C", "32.5", "1.34611e-008", "1", "15", "9", "8", "0.111111", "0.388889", "0.125", "0.375", "C", "35", 
            "10", "5", "14", "9", "16", "0.142857", "0.357143", "0.166667", "0.333333", "C", "37.5", "20", "6", "13", 
            "9", "17", "0.2", "0.3", "0.25", "0.25", "C", "50", "10", "5", "17", "2", "1", "0.3", "0.2", "0.125", 
            "0.375", "C", "50", "20", "6", "18", "2", "19", "0.277778", "0.222222", "0.166667", "0.333333", "B", 
            "STRIP", "V", "7", "V", "11", "V", "12", "V", "14", "V", "13", "V", "18", "V", "9", "V", "20", "V", "2", 
            "E", "B", "FAN", "V", "10", "V", "3", "V", "13", "V", "9", "V", "2", "V", "3", "E", "B", "STRIP", "V", 
            "11", "V", "15", "V", "14", "V", "17", "V", "18", "V", "19", "V", "20", "V", "5", "V", "6", "E", "B", 
            "FAN", "V", "17", "V", "15", "V", "16", "V", "1", "V", "19", "E", "B", "TRI", "V", "15", "V", "11", "V", 
            "0", "V", "16", "V", "15", "V", "8", "V", "13", "V", "3", "V", "12", "V", "11", "V", "7", "V", "4", "E", 
            },
            // RECTS & TRI, NEGATIVE
            new string[] {"C", "10", "10", "5", "4", "3", "0", "0.0833333", "0.416667", "0.125", "0.375", "C", "10", 
            "20", "6", "7", "3", "11", "0.0833333", "0.416667", "0.166667", "0.333333", "C", "22.5", "20", "8", "10", 
            "6", "12", "0.125", "0.375", "0.125", "0.375", "C", "25", "10", "8", "13", "5", "11", "0.166667", "0.333333", 
            "0.15", "0.35", "C", "27.5", "3.46142e-008", "8", "14", "1", "0", "0.25", "0.25", "0.21875", "0.28125", 
            "C", "32.5", "1.34611e-008", "1", "15", "9", "8", "0.111111", "0.388889", "0.125", "0.375", "C", "35", 
            "10", "5", "14", "9", "16", "0.142857", "0.357143", "0.166667", "0.333333", "C", "37.5", "20", "6", "13", 
            "9", "17", "0.2", "0.3", "0.25", "0.25", "C", "50", "10", "5", "17", "2", "1", "0.3", "0.2", "0.125", 
            "0.375", "C", "50", "20", "6", "18", "2", "19", "0.277778", "0.222222", "0.166667", "0.333333", },
            // RECTS & TRI, ABS >= 2
            new string[] {"C", "10", "10", "5", "4", "3", "0", "0.0833333", "0.416667", "0.125", "0.375", "C", "10", 
            "20", "6", "7", "3", "11", "0.0833333", "0.416667", "0.166667", "0.333333", "C", "22.5", "20", "8", "10", 
            "6", "12", "0.125", "0.375", "0.125", "0.375", "C", "25", "10", "8", "13", "5", "11", "0.166667", "0.333333", 
            "0.15", "0.35", "C", "27.5", "3.46142e-008", "8", "14", "1", "0", "0.25", "0.25", "0.21875", "0.28125", 
            "C", "32.5", "1.34611e-008", "1", "15", "9", "8", "0.111111", "0.388889", "0.125", "0.375", "C", "35", 
            "10", "5", "14", "9", "16", "0.142857", "0.357143", "0.166667", "0.333333", "C", "37.5", "20", "6", "13", 
            "9", "17", "0.2", "0.3", "0.25", "0.25", "C", "50", "10", "5", "17", "2", "1", "0.3", "0.2", "0.125", 
            "0.375", "C", "50", "20", "6", "18", "2", "19", "0.277778", "0.222222", "0.166667", "0.333333", "B", 
            "FAN", "V", "14", "V", "15", "V", "17", "V", "18", "V", "13", "V", "12", "V", "11", "E", "B", "FAN", 
            "V", "9", "V", "10", "V", "13", "V", "18", "E", "B", "FAN", "V", "18", "V", "17", "V", "19", "V", "20", 
            "E", "B", "TRI", "V", "17", "V", "15", "V", "16", "E", },
            // RECTS & TRI, ODD, EDGE FLAG
            new string[] {"C", "10", "10", "5", "4", "3", "0", "0.0833333", "0.416667", "0.125", "0.375", "C", "10", 
            "20", "6", "7", "3", "11", "0.0833333", "0.416667", "0.166667", "0.333333", "C", "22.5", "20", "8", "10", 
            "6", "12", "0.125", "0.375", "0.125", "0.375", "C", "25", "10", "8", "13", "5", "11", "0.166667", "0.333333", 
            "0.15", "0.35", "C", "27.5", "3.46142e-008", "8", "14", "1", "0", "0.25", "0.25", "0.21875", "0.28125", 
            "C", "32.5", "1.34611e-008", "1", "15", "9", "8", "0.111111", "0.388889", "0.125", "0.375", "C", "35", 
            "10", "5", "14", "9", "16", "0.142857", "0.357143", "0.166667", "0.333333", "C", "37.5", "20", "6", "13", 
            "9", "17", "0.2", "0.3", "0.25", "0.25", "C", "50", "10", "5", "17", "2", "1", "0.3", "0.2", "0.125", 
            "0.375", "C", "50", "20", "6", "18", "2", "19", "0.277778", "0.222222", "0.166667", "0.333333", "B", 
            "TRI", "F", "0", "V", "15", "F", "1", "V", "11", "V", "0", "F", "0", "V", "11", "F", "1", "V", "15", 
            "V", "14", "V", "16", "V", "15", "V", "8", "F", "0", "V", "20", "F", "1", "V", "9", "V", "18", "F", "0", 
            "V", "1", "F", "1", "V", "17", "V", "16", "F", "0", "V", "17", "F", "1", "V", "1", "V", "19", "F", "0", 
            "V", "5", "F", "1", "V", "20", "V", "19", "F", "0", "V", "20", "F", "1", "V", "5", "V", "6", "F", "0", 
            "V", "10", "F", "1", "V", "2", "F", "0", "V", "3", "V", "2", "F", "1", "V", "10", "F", "0", "V", "9", 
            "V", "2", "V", "9", "F", "1", "V", "20", "F", "0", "V", "14", "F", "1", "V", "18", "V", "13", "F", "0", 
            "V", "18", "F", "1", "V", "14", "V", "17", "F", "0", "V", "13", "F", "1", "V", "3", "V", "12", "F", "0", 
            "V", "3", "F", "1", "V", "13", "F", "0", "V", "10", "V", "11", "F", "1", "V", "7", "V", "4", "F", "0", 
            "V", "7", "F", "1", "V", "11", "V", "12", "E", },
            // RECTS & TRI, NON-ZERO, EDGE FLAG
            new string[] {"C", "10", "10", "5", "4", "3", "0", "0.0833333", "0.416667", "0.125", "0.375", "C", "10", 
            "20", "6", "7", "3", "11", "0.0833333", "0.416667", "0.166667", "0.333333", "C", "22.5", "20", "8", "10", 
            "6", "12", "0.125", "0.375", "0.125", "0.375", "C", "25", "10", "8", "13", "5", "11", "0.166667", "0.333333", 
            "0.15", "0.35", "C", "27.5", "3.46142e-008", "8", "14", "1", "0", "0.25", "0.25", "0.21875", "0.28125", 
            "C", "32.5", "1.34611e-008", "1", "15", "9", "8", "0.111111", "0.388889", "0.125", "0.375", "C", "35", 
            "10", "5", "14", "9", "16", "0.142857", "0.357143", "0.166667", "0.333333", "C", "37.5", "20", "6", "13", 
            "9", "17", "0.2", "0.3", "0.25", "0.25", "C", "50", "10", "5", "17", "2", "1", "0.3", "0.2", "0.125", 
            "0.375", "C", "50", "20", "6", "18", "2", "19", "0.277778", "0.222222", "0.166667", "0.333333", "B", 
            "TRI", "F", "0", "V", "15", "F", "1", "V", "11", "V", "0", "F", "0", "V", "11", "V", "15", "V", "14", 
            "V", "15", "V", "17", "V", "14", "V", "17", "V", "15", "V", "16", "V", "16", "F", "1", "V", "15", "V", 
            "8", "F", "0", "V", "20", "V", "9", "V", "18", "V", "19", "V", "18", "V", "17", "V", "18", "V", "19", 
            "V", "20", "V", "1", "V", "17", "F", "1", "V", "16", "F", "0", "V", "17", "F", "1", "V", "1", "F", "0", 
            "V", "19", "V", "5", "V", "20", "F", "1", "V", "19", "F", "0", "V", "20", "F", "1", "V", "5", "V", "6", 
            "F", "0", "V", "10", "F", "1", "V", "2", "F", "0", "V", "3", "V", "2", "V", "10", "V", "9", "V", "2", 
            "V", "9", "F", "1", "V", "20", "F", "0", "V", "13", "V", "9", "V", "10", "V", "9", "V", "13", "V", "18", 
            "V", "14", "V", "18", "V", "13", "V", "18", "V", "14", "V", "17", "V", "14", "V", "12", "V", "11", "V", 
            "12", "V", "14", "V", "13", "V", "13", "F", "1", "V", "3", "F", "0", "V", "12", "V", "3", "V", "13", 
            "V", "10", "V", "11", "F", "1", "V", "7", "V", "4", "F", "0", "V", "7", "V", "11", "F", "1", "V", "12", 
            "E", },
            // RECTS & TRI, POSITVE, EDGE FLAG
            new string[] {"C", "10", "10", "5", "4", "3", "0", "0.0833333", "0.416667", "0.125", "0.375", "C", "10", 
            "20", "6", "7", "3", "11", "0.0833333", "0.416667", "0.166667", "0.333333", "C", "22.5", "20", "8", "10", 
            "6", "12", "0.125", "0.375", "0.125", "0.375", "C", "25", "10", "8", "13", "5", "11", "0.166667", "0.333333", 
            "0.15", "0.35", "C", "27.5", "3.46142e-008", "8", "14", "1", "0", "0.25", "0.25", "0.21875", "0.28125", 
            "C", "32.5", "1.34611e-008", "1", "15", "9", "8", "0.111111", "0.388889", "0.125", "0.375", "C", "35", 
            "10", "5", "14", "9", "16", "0.142857", "0.357143", "0.166667", "0.333333", "C", "37.5", "20", "6", "13", 
            "9", "17", "0.2", "0.3", "0.25", "0.25", "C", "50", "10", "5", "17", "2", "1", "0.3", "0.2", "0.125", 
            "0.375", "C", "50", "20", "6", "18", "2", "19", "0.277778", "0.222222", "0.166667", "0.333333", "B", 
            "TRI", "F", "0", "V", "15", "F", "1", "V", "11", "V", "0", "F", "0", "V", "11", "V", "15", "V", "14", 
            "V", "15", "V", "17", "V", "14", "V", "17", "V", "15", "V", "16", "V", "16", "F", "1", "V", "15", "V", 
            "8", "F", "0", "V", "20", "V", "9", "V", "18", "V", "19", "V", "18", "V", "17", "V", "18", "V", "19", 
            "V", "20", "V", "1", "V", "17", "F", "1", "V", "16", "F", "0", "V", "17", "F", "1", "V", "1", "F", "0", 
            "V", "19", "V", "5", "V", "20", "F", "1", "V", "19", "F", "0", "V", "20", "F", "1", "V", "5", "V", "6", 
            "F", "0", "V", "10", "F", "1", "V", "2", "F", "0", "V", "3", "V", "2", "V", "10", "V", "9", "V", "2", 
            "V", "9", "F", "1", "V", "20", "F", "0", "V", "13", "V", "9", "V", "10", "V", "9", "V", "13", "V", "18", 
            "V", "14", "V", "18", "V", "13", "V", "18", "V", "14", "V", "17", "V", "14", "V", "12", "V", "11", "V", 
            "12", "V", "14", "V", "13", "V", "13", "F", "1", "V", "3", "F", "0", "V", "12", "V", "3", "V", "13", 
            "V", "10", "V", "11", "F", "1", "V", "7", "V", "4", "F", "0", "V", "7", "V", "11", "F", "1", "V", "12", 
            "E", },
            // RECTS & TRI, NEGATIVE, EDGE FLAG
            new string[] {"C", "10", "10", "5", "4", "3", "0", "0.0833333", "0.416667", "0.125", "0.375", "C", "10", 
            "20", "6", "7", "3", "11", "0.0833333", "0.416667", "0.166667", "0.333333", "C", "22.5", "20", "8", "10", 
            "6", "12", "0.125", "0.375", "0.125", "0.375", "C", "25", "10", "8", "13", "5", "11", "0.166667", "0.333333", 
            "0.15", "0.35", "C", "27.5", "3.46142e-008", "8", "14", "1", "0", "0.25", "0.25", "0.21875", "0.28125", 
            "C", "32.5", "1.34611e-008", "1", "15", "9", "8", "0.111111", "0.388889", "0.125", "0.375", "C", "35", 
            "10", "5", "14", "9", "16", "0.142857", "0.357143", "0.166667", "0.333333", "C", "37.5", "20", "6", "13", 
            "9", "17", "0.2", "0.3", "0.25", "0.25", "C", "50", "10", "5", "17", "2", "1", "0.3", "0.2", "0.125", 
            "0.375", "C", "50", "20", "6", "18", "2", "19", "0.277778", "0.222222", "0.166667", "0.333333", },
            // RECTS & TRI, ABS >= 0, EDGE FLAG
            new string[] {"C", "10", "10", "5", "4", "3", "0", "0.0833333", "0.416667", "0.125", "0.375", "C", "10", 
            "20", "6", "7", "3", "11", "0.0833333", "0.416667", "0.166667", "0.333333", "C", "22.5", "20", "8", "10", 
            "6", "12", "0.125", "0.375", "0.125", "0.375", "C", "25", "10", "8", "13", "5", "11", "0.166667", "0.333333", 
            "0.15", "0.35", "C", "27.5", "3.46142e-008", "8", "14", "1", "0", "0.25", "0.25", "0.21875", "0.28125", 
            "C", "32.5", "1.34611e-008", "1", "15", "9", "8", "0.111111", "0.388889", "0.125", "0.375", "C", "35", 
            "10", "5", "14", "9", "16", "0.142857", "0.357143", "0.166667", "0.333333", "C", "37.5", "20", "6", "13", 
            "9", "17", "0.2", "0.3", "0.25", "0.25", "C", "50", "10", "5", "17", "2", "1", "0.3", "0.2", "0.125", 
            "0.375", "C", "50", "20", "6", "18", "2", "19", "0.277778", "0.222222", "0.166667", "0.333333", "B", 
            "TRI", "F", "0", "V", "15", "V", "17", "F", "1", "V", "14", "F", "0", "V", "17", "F", "1", "V", "15", 
            "V", "16", "F", "0", "V", "19", "V", "18", "F", "1", "V", "17", "F", "0", "V", "18", "F", "1", "V", "19", 
            "V", "20", "F", "0", "V", "13", "F", "1", "V", "9", "V", "10", "F", "0", "V", "9", "V", "13", "F", "1", 
            "V", "18", "F", "0", "V", "14", "V", "18", "V", "13", "V", "18", "V", "14", "V", "17", "V", "14", "F", 
            "1", "V", "12", "V", "11", "F", "0", "V", "12", "V", "14", "F", "1", "V", "13", "E", },
            // LONG PATH, ODD
            new string[] {"C", "0", "0", "16", "0", "0", "0", "0.5", "0.5", "0", "0", "C", "40", "40", "2", "3", 
            "6", "5", "0.125", "0.375", "0.25", "0.25", "C", "50", "40", "2", "18", "10", "9", "0.166667", "0.333333", 
            "0.25", "0.25", "C", "60", "40", "2", "19", "14", "13", "0.25", "0.25", "0.25", "0.25", "B", "STRIP", 
            "V", "18", "V", "6", "V", "3", "V", "7", "V", "4", "V", "8", "V", "9", "E", "B", "STRIP", "V", "19", 
            "V", "20", "V", "10", "V", "14", "V", "11", "V", "15", "V", "12", "V", "17", "V", "1", "E", "B", "FAN", 
            "V", "1", "V", "2", "V", "20", "V", "13", "V", "12", "E", "B", "FAN", "V", "9", "V", "19", "V", "18", 
            "V", "5", "V", "4", "E", },
            // LONG PATH, NON-ZERO
            new string[] {"C", "0", "0", "16", "0", "0", "0", "0.5", "0.5", "0", "0", "C", "40", "40", "2", "3", 
            "6", "5", "0.125", "0.375", "0.25", "0.25", "C", "50", "40", "2", "18", "10", "9", "0.166667", "0.333333", 
            "0.25", "0.25", "C", "60", "40", "2", "19", "14", "13", "0.25", "0.25", "0.25", "0.25", "B", "STRIP", 
            "V", "15", "V", "17", "V", "12", "V", "1", "V", "13", "V", "20", "V", "19", "V", "10", "V", "6", "V", 
            "7", "V", "3", "V", "4", "V", "5", "V", "9", "V", "18", "V", "19", "V", "6", "E", "B", "FAN", "V", "11", 
            "V", "8", "V", "7", "V", "10", "V", "14", "V", "15", "V", "12", "V", "8", "E", "B", "FAN", "V", "9", 
            "V", "4", "V", "8", "V", "13", "V", "19", "E", "B", "FAN", "V", "3", "V", "5", "V", "18", "V", "6", "E", 
            "B", "TRI", "V", "8", "V", "4", "V", "7", "V", "8", "V", "12", "V", "13", "V", "20", "V", "1", "V", "2", 
            "V", "14", "V", "10", "V", "20", "E", },
            // LONG PATH, POSITIVE
            new string[] {"C", "0", "0", "16", "0", "0", "0", "0.5", "0.5", "0", "0", "C", "40", "40", "2", "3", 
            "6", "5", "0.125", "0.375", "0.25", "0.25", "C", "50", "40", "2", "18", "10", "9", "0.166667", "0.333333", 
            "0.25", "0.25", "C", "60", "40", "2", "19", "14", "13", "0.25", "0.25", "0.25", "0.25", "B", "STRIP", 
            "V", "15", "V", "17", "V", "12", "V", "1", "V", "13", "V", "20", "V", "19", "V", "10", "V", "6", "V", 
            "7", "V", "3", "V", "4", "V", "5", "V", "9", "V", "18", "V", "19", "V", "6", "E", "B", "FAN", "V", "11", 
            "V", "8", "V", "7", "V", "10", "V", "14", "V", "15", "V", "12", "V", "8", "E", "B", "FAN", "V", "9", 
            "V", "4", "V", "8", "V", "13", "V", "19", "E", "B", "FAN", "V", "3", "V", "5", "V", "18", "V", "6", "E", 
            "B", "TRI", "V", "8", "V", "4", "V", "7", "V", "8", "V", "12", "V", "13", "V", "20", "V", "1", "V", "2", 
            "V", "14", "V", "10", "V", "20", "E", },
            // LONG PATH, NEGATIVE
            new string[] {"C", "0", "0", "16", "0", "0", "0", "0.5", "0.5", "0", "0", "C", "40", "40", "2", "3", 
            "6", "5", "0.125", "0.375", "0.25", "0.25", "C", "50", "40", "2", "18", "10", "9", "0.166667", "0.333333", 
            "0.25", "0.25", "C", "60", "40", "2", "19", "14", "13", "0.25", "0.25", "0.25", "0.25", },
            // LONG PATH, ABS >= 2
            new string[] {"C", "0", "0", "16", "0", "0", "0", "0.5", "0.5", "0", "0", "C", "40", "40", "2", "3", 
            "6", "5", "0.125", "0.375", "0.25", "0.25", "C", "50", "40", "2", "18", "10", "9", "0.166667", "0.333333", 
            "0.25", "0.25", "C", "60", "40", "2", "19", "14", "13", "0.25", "0.25", "0.25", "0.25", "B", "STRIP", 
            "V", "10", "V", "11", "V", "7", "V", "8", "V", "4", "V", "9", "V", "5", "V", "18", "V", "3", "V", "6", 
            "V", "7", "V", "10", "E", "B", "FAN", "V", "3", "V", "7", "V", "4", "V", "5", "E", "B", "FAN", "V", "19", 
            "V", "10", "V", "6", "V", "18", "V", "9", "V", "13", "V", "20", "E", "B", "FAN", "V", "8", "V", "11", 
            "V", "12", "V", "13", "V", "9", "E", },
            // LONG PATH, ODD, EDGE FLAG
            new string[] {"C", "0", "0", "16", "0", "0", "0", "0.5", "0.5", "0", "0", "C", "40", "40", "2", "3", 
            "6", "5", "0.125", "0.375", "0.25", "0.25", "C", "50", "40", "2", "18", "10", "9", "0.166667", "0.333333", 
            "0.25", "0.25", "C", "60", "40", "2", "19", "14", "13", "0.25", "0.25", "0.25", "0.25", "B", "TRI", "F", 
            "0", "V", "8", "V", "4", "F", "1", "V", "7", "F", "0", "V", "4", "F", "1", "V", "8", "F", "0", "V", "9", 
            "V", "4", "V", "9", "F", "1", "V", "5", "F", "0", "V", "5", "V", "9", "F", "1", "V", "18", "F", "0", 
            "V", "18", "F", "1", "V", "9", "V", "19", "F", "0", "V", "20", "F", "1", "V", "10", "V", "19", "F", "0", 
            "V", "17", "V", "12", "F", "1", "V", "15", "F", "0", "V", "12", "F", "1", "V", "17", "F", "0", "V", "1", 
            "V", "12", "V", "1", "F", "1", "V", "13", "F", "0", "V", "13", "V", "1", "F", "1", "V", "20", "F", "0", 
            "V", "20", "F", "1", "V", "1", "V", "2", "F", "0", "V", "15", "V", "11", "F", "1", "V", "14", "F", "0", 
            "V", "11", "V", "15", "F", "1", "V", "12", "F", "0", "V", "14", "F", "1", "V", "11", "F", "0", "V", "10", 
            "V", "14", "V", "10", "F", "1", "V", "20", "F", "0", "V", "7", "V", "3", "F", "1", "V", "6", "F", "0", 
            "V", "3", "V", "7", "F", "1", "V", "4", "F", "0", "V", "6", "F", "1", "V", "3", "V", "18", "E", },
            // LONG PATH, NON-ZERO, EDGE FLAG
            new string[] {"C", "0", "0", "16", "0", "0", "0", "0.5", "0.5", "0", "0", "C", "40", "40", "2", "3", 
            "6", "5", "0.125", "0.375", "0.25", "0.25", "C", "50", "40", "2", "18", "10", "9", "0.166667", "0.333333", 
            "0.25", "0.25", "C", "60", "40", "2", "19", "14", "13", "0.25", "0.25", "0.25", "0.25", "B", "TRI", "F", 
            "0", "V", "5", "V", "3", "V", "4", "V", "3", "V", "5", "V", "18", "V", "19", "V", "6", "V", "18", "V", 
            "8", "V", "4", "V", "7", "V", "4", "V", "8", "V", "9", "V", "4", "V", "9", "V", "5", "V", "5", "V", "9", 
            "V", "18", "V", "18", "V", "9", "V", "19", "V", "7", "V", "3", "V", "6", "V", "3", "V", "7", "V", "4", 
            "V", "6", "V", "3", "V", "18", "V", "20", "V", "10", "V", "19", "V", "12", "V", "8", "V", "11", "V", 
            "8", "V", "12", "V", "13", "V", "8", "V", "13", "V", "9", "V", "9", "V", "13", "V", "19", "V", "19", 
            "V", "13", "V", "20", "V", "17", "V", "12", "F", "1", "V", "15", "F", "0", "V", "12", "F", "1", "V", 
            "17", "F", "0", "V", "1", "V", "12", "V", "1", "V", "13", "V", "13", "V", "1", "V", "20", "V", "20", 
            "F", "1", "V", "1", "V", "2", "F", "0", "V", "15", "V", "11", "F", "1", "V", "14", "F", "0", "V", "11", 
            "V", "15", "V", "12", "V", "14", "V", "11", "V", "10", "V", "14", "V", "10", "F", "1", "V", "20", "F", 
            "0", "V", "11", "V", "7", "V", "10", "V", "7", "V", "11", "V", "8", "V", "10", "V", "7", "V", "6", "V", 
            "10", "V", "6", "V", "19", "E", },
            // LONG PATH, POSITVE, EDGE FLAG
            new string[] {"C", "0", "0", "16", "0", "0", "0", "0.5", "0.5", "0", "0", "C", "40", "40", "2", "3", 
            "6", "5", "0.125", "0.375", "0.25", "0.25", "C", "50", "40", "2", "18", "10", "9", "0.166667", "0.333333", 
            "0.25", "0.25", "C", "60", "40", "2", "19", "14", "13", "0.25", "0.25", "0.25", "0.25", "B", "TRI", "F", 
            "0", "V", "5", "V", "3", "V", "4", "V", "3", "V", "5", "V", "18", "V", "19", "V", "6", "V", "18", "V", 
            "8", "V", "4", "V", "7", "V", "4", "V", "8", "V", "9", "V", "4", "V", "9", "V", "5", "V", "5", "V", "9", 
            "V", "18", "V", "18", "V", "9", "V", "19", "V", "7", "V", "3", "V", "6", "V", "3", "V", "7", "V", "4", 
            "V", "6", "V", "3", "V", "18", "V", "20", "V", "10", "V", "19", "V", "12", "V", "8", "V", "11", "V", 
            "8", "V", "12", "V", "13", "V", "8", "V", "13", "V", "9", "V", "9", "V", "13", "V", "19", "V", "19", 
            "V", "13", "V", "20", "V", "17", "V", "12", "F", "1", "V", "15", "F", "0", "V", "12", "F", "1", "V", 
            "17", "F", "0", "V", "1", "V", "12", "V", "1", "V", "13", "V", "13", "V", "1", "V", "20", "V", "20", 
            "F", "1", "V", "1", "V", "2", "F", "0", "V", "15", "V", "11", "F", "1", "V", "14", "F", "0", "V", "11", 
            "V", "15", "V", "12", "V", "14", "V", "11", "V", "10", "V", "14", "V", "10", "F", "1", "V", "20", "F", 
            "0", "V", "11", "V", "7", "V", "10", "V", "7", "V", "11", "V", "8", "V", "10", "V", "7", "V", "6", "V", 
            "10", "V", "6", "V", "19", "E", },
            // LONG PATH, NEGATIVE, EDGE FLAG
            new string[] {"C", "0", "0", "16", "0", "0", "0", "0.5", "0.5", "0", "0", "C", "40", "40", "2", "3", 
            "6", "5", "0.125", "0.375", "0.25", "0.25", "C", "50", "40", "2", "18", "10", "9", "0.166667", "0.333333", 
            "0.25", "0.25", "C", "60", "40", "2", "19", "14", "13", "0.25", "0.25", "0.25", "0.25", },
            // LONG PATH, ABS >= 2, EDGE FLAG
            new string[] {"C", "0", "0", "16", "0", "0", "0", "0.5", "0.5", "0", "0", "C", "40", "40", "2", "3", 
            "6", "5", "0.125", "0.375", "0.25", "0.25", "C", "50", "40", "2", "18", "10", "9", "0.166667", "0.333333", 
            "0.25", "0.25", "C", "60", "40", "2", "19", "14", "13", "0.25", "0.25", "0.25", "0.25", "B", "TRI", "F", 
            "0", "V", "5", "V", "3", "V", "4", "V", "3", "V", "5", "V", "18", "V", "19", "V", "6", "V", "18", "V", 
            "8", "V", "4", "V", "7", "V", "4", "V", "8", "V", "9", "V", "4", "V", "9", "V", "5", "V", "5", "V", "9", 
            "V", "18", "V", "18", "V", "9", "V", "19", "V", "12", "V", "8", "F", "1", "V", "11", "F", "0", "V", "8", 
            "F", "1", "V", "12", "F", "0", "V", "13", "V", "8", "V", "13", "V", "9", "V", "9", "V", "13", "V", "19", 
            "V", "19", "F", "1", "V", "13", "V", "20", "F", "0", "V", "11", "V", "7", "F", "1", "V", "10", "F", "0", 
            "V", "7", "V", "11", "V", "8", "V", "10", "V", "7", "V", "6", "V", "10", "V", "6", "F", "1", "V", "19", 
            "F", "0", "V", "7", "V", "3", "V", "6", "V", "3", "V", "7", "V", "4", "V", "6", "V", "3", "V", "18", 
            "E", },
        };

        string GetNextOutputAsString()
        {
            m_LastString = m_TestOutput[m_CurrentOutputTest][m_CurrentOutput];
            m_CurrentOutput++;
            return m_LastString;
        }

        double GetNextOutputAsDouble()
        {
            return Convert.ToDouble(GetNextOutputAsString());
        }

        int GetNextOutputAsInt()
        {
            double asDouble = Convert.ToDouble(GetNextOutputAsString());
            Assert.AreEqual((int)asDouble, asDouble);
            return (int)asDouble;
        }

        bool GetNextOutputAsBool()
        {
            double asDouble = Convert.ToDouble(GetNextOutputAsString());
            if (asDouble == 1)
            {
                return true;
            }

            Assert.AreEqual(asDouble, 0);

            return false;
        }

        public void BeginCallBack(Tesselator.TriangleListType type)
        {
            Assert.IsTrue(GetNextOutputAsString() == "B");
            switch (type)
            {
                case Tesselator.TriangleListType.Triangles:
                    Assert.IsTrue(GetNextOutputAsString() == "TRI");
                    break;

                case Tesselator.TriangleListType.TriangleFan:
                    Assert.IsTrue(GetNextOutputAsString() == "FAN");
                    break;

                case Tesselator.TriangleListType.TriangleStrip:
                    Assert.IsTrue(GetNextOutputAsString() == "STRIP");
                    break;

                default:
                    throw new Exception("unknown TriangleListType '" + type.ToString() + "'.");
            }
        }

        public void EndCallBack()
        {
            Assert.IsTrue(GetNextOutputAsString() == "E");
        }

        public void VertexCallBack(int index)
        {
            Assert.IsTrue(GetNextOutputAsString() == "V");
            Assert.AreEqual(GetNextOutputAsInt(), index);
        }

        public void EdgeFlagCallBack(bool IsEdge)
        {
            Assert.IsTrue(GetNextOutputAsString() == "F");
            Assert.AreEqual(GetNextOutputAsBool(), IsEdge);
        }

        public void CombineCallBack(double v0, double v1, double v2, int[] data4,
            double[] weight4, out int outData)
        {
            double error = .001;
            Assert.IsTrue(GetNextOutputAsString() == "C");
            Assert.AreEqual(GetNextOutputAsDouble(), v0, error);
            Assert.AreEqual(GetNextOutputAsDouble(), v1, error);
            Assert.AreEqual(GetNextOutputAsInt(), data4[0]);
            Assert.AreEqual(GetNextOutputAsInt(), data4[1]);
            Assert.AreEqual(GetNextOutputAsInt(), data4[2]);
            Assert.AreEqual(GetNextOutputAsInt(), data4[3]);
            Assert.AreEqual(GetNextOutputAsDouble(), weight4[0], error);
            Assert.AreEqual(GetNextOutputAsDouble(), weight4[1], error);
            Assert.AreEqual(GetNextOutputAsDouble(), weight4[2], error);
            Assert.AreEqual(GetNextOutputAsDouble(), weight4[3], error);

            outData = m_VertexList.Count;
            m_VertexList.Add(new Vertex(v0, v1));
        }
        public void ParseStreamForTesselator(Tesselate.Tesselator tesselator, int instructionStreamIndex)
        {
            m_VertexList.Clear();
            m_CurrentOutput = 0;

            string[] instructionStream = m_InsructionStream[instructionStreamIndex];
            for (int curInstruction = 0; curInstruction < instructionStream.Length; curInstruction++)
            {
                switch (instructionStream[curInstruction])
                {
                    case "BP":
                        tesselator.BeginPolygon();
                        break;

                    case "BC":
                        tesselator.BeginContour();
                        break;

                    case "V":
                        double x = Convert.ToDouble(instructionStream[curInstruction + 1]);
                        double y = Convert.ToDouble(instructionStream[curInstruction + 2]);
                        curInstruction += 2;

                        tesselator.AddVertex(x, y, 0, m_VertexList.Count);
                        m_VertexList.Add(new Vertex(x, y));
                        break;

                    case "EC":
                        tesselator.EndContour();
                        break;

                    case "EP":
                        tesselator.EndPolygon();
                        break;

                    default:
                        throw new Exception();
                }
            }


            //---------------
            //test
            //------------------
            //int a = m_VertexList.Count;
            ////test draw
            //Bitmap bmp = new Bitmap(300, 300);
            //Graphics g = Graphics.FromImage(bmp);
            //g.Clear(Color.White);
            //int j = m_VertexList.Count;
            //int lim = j - 1;
            //for (int i = 0; i < lim; i++)
            //{
            //    var v1 = m_VertexList[i];
            //    var v2 = m_VertexList[i + 1];
            //    g.DrawLine(Pens.Black,
            //        new PointF((float)v1.m_X, (float)v1.m_Y),
            //        new PointF((float)v2.m_X, (float)v2.m_Y));

            //}
            //g.Dispose();
            //bmp.Save("tess" + (totalSampleCount++) + ".bmp");
        }
        static int totalSampleCount = 0;

        void RunTest(int instructionStreamIndex, Tesselator.WindingRuleType windingRule, bool setEdgeFlag)
        {
            Tesselate.Tesselator tesselator = new Tesselate.Tesselator();
            tesselator.callBegin += new Tesselate.Tesselator.CallBeginDelegate(BeginCallBack);
            tesselator.callEnd += new Tesselate.Tesselator.CallEndDelegate(EndCallBack);
            tesselator.callVertex += new Tesselate.Tesselator.CallVertexDelegate(VertexCallBack);
            tesselator.callCombine += new Tesselate.Tesselator.CallCombineDelegate(CombineCallBack);

            tesselator.windingRule = windingRule;
            if (setEdgeFlag)
            {
                tesselator.callEdgeFlag += new Tesselate.Tesselator.CallEdgeFlagDelegate(EdgeFlagCallBack);
            }

            ParseStreamForTesselator(tesselator, instructionStreamIndex);
        }

        [Test]
        public void MatchesGLUTesselator()
        {
            for (m_CurrentInputTest = 0; m_CurrentInputTest < m_InsructionStream.Length; m_CurrentInputTest++)
            {
                RunTest(m_CurrentInputTest, Tesselator.WindingRuleType.Odd, false);
                m_CurrentOutputTest++;
                RunTest(m_CurrentInputTest, Tesselator.WindingRuleType.NonZero, false);
                m_CurrentOutputTest++;
                RunTest(m_CurrentInputTest, Tesselator.WindingRuleType.Positive, false);
                m_CurrentOutputTest++;
                RunTest(m_CurrentInputTest, Tesselator.WindingRuleType.Negative, false);
                m_CurrentOutputTest++;
                RunTest(m_CurrentInputTest, Tesselator.WindingRuleType.ABS_GEQ_Two, false);
                m_CurrentOutputTest++;

                RunTest(m_CurrentInputTest, Tesselator.WindingRuleType.Odd, true);
                m_CurrentOutputTest++;
                RunTest(m_CurrentInputTest, Tesselator.WindingRuleType.NonZero, true);
                m_CurrentOutputTest++;
                RunTest(m_CurrentInputTest, Tesselator.WindingRuleType.Positive, true);
                m_CurrentOutputTest++;
                RunTest(m_CurrentInputTest, Tesselator.WindingRuleType.Negative, true);
                m_CurrentOutputTest++;
                RunTest(m_CurrentInputTest, Tesselator.WindingRuleType.ABS_GEQ_Two, true);
                m_CurrentOutputTest++;
            }
        }
    }
}